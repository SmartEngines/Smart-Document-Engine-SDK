//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.doc {

using se.common;

public class DocSessionSettings : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public DocSessionSettings(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(DocSessionSettings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(DocSessionSettings obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DocSessionSettings() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csdocenginePINVOKE.delete_DocSessionSettings(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual DocSessionSettings Clone() {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocSessionSettings_Clone(swigCPtr);
    DocSessionSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocSessionSettings(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetOptionsCount() {
    int ret = csdocenginePINVOKE.DocSessionSettings_GetOptionsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasOption(string option_name) {
    bool ret = csdocenginePINVOKE.DocSessionSettings_HasOption(swigCPtr, option_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetOption(string option_name) {
    string ret = csdocenginePINVOKE.DocSessionSettings_GetOption(swigCPtr, option_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetOption(string option_name, string option_value) {
    csdocenginePINVOKE.DocSessionSettings_SetOption(swigCPtr, option_name, option_value);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveOption(string option_name) {
    csdocenginePINVOKE.DocSessionSettings_RemoveOption(swigCPtr, option_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual StringsMapIterator OptionsBegin() {
    StringsMapIterator ret = new StringsMapIterator(csdocenginePINVOKE.DocSessionSettings_OptionsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator OptionsEnd() {
    StringsMapIterator ret = new StringsMapIterator(csdocenginePINVOKE.DocSessionSettings_OptionsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetSupportedModesCount() {
    int ret = csdocenginePINVOKE.DocSessionSettings_GetSupportedModesCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasSupportedMode(string mode_name) {
    bool ret = csdocenginePINVOKE.DocSessionSettings_HasSupportedMode(swigCPtr, mode_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetSupportedMode(int mode_id) {
    string ret = csdocenginePINVOKE.DocSessionSettings_GetSupportedMode(swigCPtr, mode_id);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsVectorIterator SupportedModesBegin() {
    StringsVectorIterator ret = new StringsVectorIterator(csdocenginePINVOKE.DocSessionSettings_SupportedModesBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsVectorIterator SupportedModesEnd() {
    StringsVectorIterator ret = new StringsVectorIterator(csdocenginePINVOKE.DocSessionSettings_SupportedModesEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetCurrentMode() {
    string ret = csdocenginePINVOKE.DocSessionSettings_GetCurrentMode(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetCurrentMode(string mode_name) {
    csdocenginePINVOKE.DocSessionSettings_SetCurrentMode(swigCPtr, mode_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetInternalEnginesCount() {
    int ret = csdocenginePINVOKE.DocSessionSettings_GetInternalEnginesCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetSupportedDocumentTypesCount(int engine_id) {
    int ret = csdocenginePINVOKE.DocSessionSettings_GetSupportedDocumentTypesCount(swigCPtr, engine_id);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasSupportedDocumentType(int engine_id, string doc_name) {
    bool ret = csdocenginePINVOKE.DocSessionSettings_HasSupportedDocumentType(swigCPtr, engine_id, doc_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetSupportedDocumentType(int engine_id, int doc_id) {
    string ret = csdocenginePINVOKE.DocSessionSettings_GetSupportedDocumentType(swigCPtr, engine_id, doc_id);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetEnabledDocumentTypesCount() {
    int ret = csdocenginePINVOKE.DocSessionSettings_GetEnabledDocumentTypesCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasEnabledDocumentType(string doc_name) {
    bool ret = csdocenginePINVOKE.DocSessionSettings_HasEnabledDocumentType(swigCPtr, doc_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetEnabledDocumentType(int doc_id) {
    string ret = csdocenginePINVOKE.DocSessionSettings_GetEnabledDocumentType(swigCPtr, doc_id);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocDocumentInfo GetDocumentInfo(string doc_name) {
    DocDocumentInfo ret = new DocDocumentInfo(csdocenginePINVOKE.DocSessionSettings_GetDocumentInfo(swigCPtr, doc_name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void AddEnabledDocumentTypes(string doc_type_mask) {
    csdocenginePINVOKE.DocSessionSettings_AddEnabledDocumentTypes(swigCPtr, doc_type_mask);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveEnabledDocumentTypes(string doc_type_mask) {
    csdocenginePINVOKE.DocSessionSettings_RemoveEnabledDocumentTypes(swigCPtr, doc_type_mask);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual StringsSetIterator PermissiblePrefixDocMasksBegin() {
    StringsSetIterator ret = new StringsSetIterator(csdocenginePINVOKE.DocSessionSettings_PermissiblePrefixDocMasksBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator PermissiblePrefixDocMasksEnd() {
    StringsSetIterator ret = new StringsSetIterator(csdocenginePINVOKE.DocSessionSettings_PermissiblePrefixDocMasksEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsForensicsEnabled() {
    bool ret = csdocenginePINVOKE.DocSessionSettings_IsForensicsEnabled(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void EnableForensics() {
    csdocenginePINVOKE.DocSessionSettings_EnableForensics(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DisableForensics() {
    csdocenginePINVOKE.DocSessionSettings_DisableForensics(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
