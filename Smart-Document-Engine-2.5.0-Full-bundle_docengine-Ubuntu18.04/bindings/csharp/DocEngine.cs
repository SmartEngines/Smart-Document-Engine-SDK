//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.doc {

using se.common;

public class DocEngine : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public DocEngine(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(DocEngine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(DocEngine obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DocEngine() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csdocenginePINVOKE.delete_DocEngine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual DocSessionSettings CreateSessionSettings() {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_CreateSessionSettings(swigCPtr);
    DocSessionSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocSessionSettings(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocSession SpawnSession(DocSessionSettings settings, string signature, DocFeedback feedback_reporter) {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_SpawnSession__SWIG_0(swigCPtr, DocSessionSettings.getCPtr(settings), signature, DocFeedback.getCPtr(feedback_reporter));
    DocSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocSession(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocSession SpawnSession(DocSessionSettings settings, string signature) {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_SpawnSession__SWIG_1(swigCPtr, DocSessionSettings.getCPtr(settings), signature);
    DocSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocSession(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DocEngine Create(string config_path, bool lazy_configuration) {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_Create__SWIG_0(config_path, lazy_configuration);
    DocEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocEngine(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DocEngine Create(string config_path) {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_Create__SWIG_1(config_path);
    DocEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocEngine(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DocEngine Create(byte[] config_data, int config_data_length, bool lazy_configuration) {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_Create__SWIG_2(config_data, config_data_length, lazy_configuration);
    DocEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocEngine(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DocEngine Create(byte[] config_data, int config_data_length) {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_Create__SWIG_3(config_data, config_data_length);
    DocEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocEngine(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DocEngine CreateFromEmbeddedBundle(bool lazy_configuration) {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_CreateFromEmbeddedBundle__SWIG_0(lazy_configuration);
    DocEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocEngine(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DocEngine CreateFromEmbeddedBundle() {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_CreateFromEmbeddedBundle__SWIG_1();
    DocEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocEngine(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetVersion() {
    string ret = csdocenginePINVOKE.DocEngine_GetVersion();
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocSession SpawnSession(DocSessionSettings settings, string signature, DocFeedback feedback_reporter, DocExternalProcessorInterface external_processor) {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_SpawnSession__SWIG_2(swigCPtr, DocSessionSettings.getCPtr(settings), signature, DocFeedback.getCPtr(feedback_reporter), DocExternalProcessorInterface.getCPtr(external_processor));
    DocSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocSession(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocSessionSettings CreateVideoSessionSettings() {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_CreateVideoSessionSettings(swigCPtr);
    DocSessionSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocSessionSettings(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocVideoSession SpawnVideoSession(DocSessionSettings settings, string signature, DocFeedback feedback_reporter) {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_SpawnVideoSession__SWIG_0(swigCPtr, DocSessionSettings.getCPtr(settings), signature, DocFeedback.getCPtr(feedback_reporter));
    DocVideoSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocVideoSession(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocVideoSession SpawnVideoSession(DocSessionSettings settings, string signature) {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocEngine_SpawnVideoSession__SWIG_1(swigCPtr, DocSessionSettings.getCPtr(settings), signature);
    DocVideoSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocVideoSession(cPtr, true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
