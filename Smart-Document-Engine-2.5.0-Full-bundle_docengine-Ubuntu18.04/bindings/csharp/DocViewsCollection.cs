//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.doc {

using se.common;

public class DocViewsCollection : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public DocViewsCollection(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(DocViewsCollection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(DocViewsCollection obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DocViewsCollection() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csdocenginePINVOKE.delete_DocViewsCollection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static string BaseClassNameStatic() {
    string ret = csdocenginePINVOKE.DocViewsCollection_BaseClassNameStatic();
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetViewsCount() {
    int ret = csdocenginePINVOKE.DocViewsCollection_GetViewsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasView(int view_id) {
    bool ret = csdocenginePINVOKE.DocViewsCollection_HasView(swigCPtr, view_id);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocView GetView(int view_id) {
    DocView ret = new DocView(csdocenginePINVOKE.DocViewsCollection_GetView(swigCPtr, view_id), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocView GetMutableView(int view_id) {
    DocView ret = new DocView(csdocenginePINVOKE.DocViewsCollection_GetMutableView(swigCPtr, view_id), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocTagsCollection GetViewTags(int view_id) {
    DocTagsCollection ret = new DocTagsCollection(csdocenginePINVOKE.DocViewsCollection_GetViewTags(swigCPtr, view_id), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocViewsMutableIterator RegisterView(Image image) {
    DocViewsMutableIterator ret = new DocViewsMutableIterator(csdocenginePINVOKE.DocViewsCollection_RegisterView(swigCPtr, Image.getCPtr(image)), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocViewsMutableIterator RegisterDerivedView(Image image, int ancestor_id, ProjectiveTransform transform) {
    DocViewsMutableIterator ret = new DocViewsMutableIterator(csdocenginePINVOKE.DocViewsCollection_RegisterDerivedView(swigCPtr, Image.getCPtr(image), ancestor_id, ProjectiveTransform.getCPtr(transform)), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void DeleteOrphans() {
    csdocenginePINVOKE.DocViewsCollection_DeleteOrphans(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DeleteView(int view_id) {
    csdocenginePINVOKE.DocViewsCollection_DeleteView(swigCPtr, view_id);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual DocViewsIterator ViewsBegin() {
    DocViewsIterator ret = new DocViewsIterator(csdocenginePINVOKE.DocViewsCollection_ViewsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocViewsIterator ViewsEnd() {
    DocViewsIterator ret = new DocViewsIterator(csdocenginePINVOKE.DocViewsCollection_ViewsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocViewsMutableIterator MutableViewsBegin() {
    DocViewsMutableIterator ret = new DocViewsMutableIterator(csdocenginePINVOKE.DocViewsCollection_MutableViewsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocViewsMutableIterator MutableViewsEnd() {
    DocViewsMutableIterator ret = new DocViewsMutableIterator(csdocenginePINVOKE.DocViewsCollection_MutableViewsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocViewsSliceIterator ViewsSlice(string tag) {
    DocViewsSliceIterator ret = new DocViewsSliceIterator(csdocenginePINVOKE.DocViewsCollection_ViewsSlice(swigCPtr, tag), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocViewsMutableSliceIterator MutableViewsSlice(string tag) {
    DocViewsMutableSliceIterator ret = new DocViewsMutableSliceIterator(csdocenginePINVOKE.DocViewsCollection_MutableViewsSlice(swigCPtr, tag), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Serialize(Serializer serializer) {
    csdocenginePINVOKE.DocViewsCollection_Serialize(swigCPtr, Serializer.getCPtr(serializer));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
