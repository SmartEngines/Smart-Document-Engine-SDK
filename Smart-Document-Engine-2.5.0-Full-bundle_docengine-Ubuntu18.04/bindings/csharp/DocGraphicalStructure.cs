//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.doc {

using se.common;

public class DocGraphicalStructure : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public DocGraphicalStructure(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(DocGraphicalStructure obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(DocGraphicalStructure obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DocGraphicalStructure() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csdocenginePINVOKE.delete_DocGraphicalStructure(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual int GetCollectionsCount() {
    int ret = csdocenginePINVOKE.DocGraphicalStructure_GetCollectionsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasCollection(int c_id) {
    bool ret = csdocenginePINVOKE.DocGraphicalStructure_HasCollection(swigCPtr, c_id);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocObjectsCollection GetCollection(int c_id) {
    DocObjectsCollection ret = new DocObjectsCollection(csdocenginePINVOKE.DocGraphicalStructure_GetCollection(swigCPtr, c_id), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocObjectsCollection GetMutableCollection(int c_id) {
    DocObjectsCollection ret = new DocObjectsCollection(csdocenginePINVOKE.DocGraphicalStructure_GetMutableCollection(swigCPtr, c_id), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocTagsCollection GetCollectionTags(int c_id) {
    DocTagsCollection ret = new DocTagsCollection(csdocenginePINVOKE.DocGraphicalStructure_GetCollectionTags(swigCPtr, c_id), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocObjectsCollectionsMutableIterator AddCollection(DocObjectsCollection collection) {
    DocObjectsCollectionsMutableIterator ret = new DocObjectsCollectionsMutableIterator(csdocenginePINVOKE.DocGraphicalStructure_AddCollection__SWIG_0(swigCPtr, DocObjectsCollection.getCPtr(collection)), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocObjectsCollectionsMutableIterator AddCollection(DocObjectsCollection collection, DocTagsCollection tags) {
    DocObjectsCollectionsMutableIterator ret = new DocObjectsCollectionsMutableIterator(csdocenginePINVOKE.DocGraphicalStructure_AddCollection__SWIG_1(swigCPtr, DocObjectsCollection.getCPtr(collection), DocTagsCollection.getCPtr(tags)), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetCollection(int c_id, DocObjectsCollection collection) {
    csdocenginePINVOKE.DocGraphicalStructure_SetCollection(swigCPtr, c_id, DocObjectsCollection.getCPtr(collection));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveCollection(int c_id) {
    csdocenginePINVOKE.DocGraphicalStructure_RemoveCollection(swigCPtr, c_id);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual DocObjectsCollectionsIterator ObjectsCollectionsBegin() {
    DocObjectsCollectionsIterator ret = new DocObjectsCollectionsIterator(csdocenginePINVOKE.DocGraphicalStructure_ObjectsCollectionsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocObjectsCollectionsIterator ObjectsCollectionsEnd() {
    DocObjectsCollectionsIterator ret = new DocObjectsCollectionsIterator(csdocenginePINVOKE.DocGraphicalStructure_ObjectsCollectionsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocObjectsCollectionsMutableIterator MutableObjectsCollectionsBegin() {
    DocObjectsCollectionsMutableIterator ret = new DocObjectsCollectionsMutableIterator(csdocenginePINVOKE.DocGraphicalStructure_MutableObjectsCollectionsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocObjectsCollectionsMutableIterator MutableObjectsCollectionsEnd() {
    DocObjectsCollectionsMutableIterator ret = new DocObjectsCollectionsMutableIterator(csdocenginePINVOKE.DocGraphicalStructure_MutableObjectsCollectionsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocObjectsCollectionsSliceIterator ObjectsCollectionsSlice(string tag) {
    DocObjectsCollectionsSliceIterator ret = new DocObjectsCollectionsSliceIterator(csdocenginePINVOKE.DocGraphicalStructure_ObjectsCollectionsSlice(swigCPtr, tag), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocObjectsCollectionsMutableSliceIterator MutableObjectsCollectionsSlice(string tag) {
    DocObjectsCollectionsMutableSliceIterator ret = new DocObjectsCollectionsMutableSliceIterator(csdocenginePINVOKE.DocGraphicalStructure_MutableObjectsCollectionsSlice(swigCPtr, tag), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocViewsCollection GetViewsCollection() {
    DocViewsCollection ret = new DocViewsCollection(csdocenginePINVOKE.DocGraphicalStructure_GetViewsCollection(swigCPtr), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocViewsCollection GetMutableViewsCollection() {
    DocViewsCollection ret = new DocViewsCollection(csdocenginePINVOKE.DocGraphicalStructure_GetMutableViewsCollection(swigCPtr), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Serialize(Serializer serializer) {
    csdocenginePINVOKE.DocGraphicalStructure_Serialize(swigCPtr, Serializer.getCPtr(serializer));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
