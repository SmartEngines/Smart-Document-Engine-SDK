//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.doc {

using se.common;

public class DocBaseObjectInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public DocBaseObjectInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(DocBaseObjectInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(DocBaseObjectInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DocBaseObjectInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csdocenginePINVOKE.delete_DocBaseObjectInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual double GetConfidence() {
    double ret = csdocenginePINVOKE.DocBaseObjectInfo_GetConfidence(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool GetAcceptFlag() {
    bool ret = csdocenginePINVOKE.DocBaseObjectInfo_GetAcceptFlag(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Polygon GetGeometryOnPage() {
    Polygon ret = new Polygon(csdocenginePINVOKE.DocBaseObjectInfo_GetGeometryOnPage(swigCPtr), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Polygon GetGeometryOnPagePtr() {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocBaseObjectInfo_GetGeometryOnPagePtr(swigCPtr);
    Polygon ret = (cPtr == global::System.IntPtr.Zero) ? null : new Polygon(cPtr, false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Polygon GetGeometryOnScene() {
    Polygon ret = new Polygon(csdocenginePINVOKE.DocBaseObjectInfo_GetGeometryOnScene(swigCPtr), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Polygon GetGeometryOnScenePtr() {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocBaseObjectInfo_GetGeometryOnScenePtr(swigCPtr);
    Polygon ret = (cPtr == global::System.IntPtr.Zero) ? null : new Polygon(cPtr, false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetAttributesCount() {
    int ret = csdocenginePINVOKE.DocBaseObjectInfo_GetAttributesCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasAttribute(string attr_name) {
    bool ret = csdocenginePINVOKE.DocBaseObjectInfo_HasAttribute(swigCPtr, attr_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetAttribute(string attr_name) {
    string ret = csdocenginePINVOKE.DocBaseObjectInfo_GetAttribute(swigCPtr, attr_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator AttributesBegin() {
    StringsMapIterator ret = new StringsMapIterator(csdocenginePINVOKE.DocBaseObjectInfo_AttributesBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator AttributesEnd() {
    StringsMapIterator ret = new StringsMapIterator(csdocenginePINVOKE.DocBaseObjectInfo_AttributesEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Serialize(Serializer serializer) {
    csdocenginePINVOKE.DocBaseObjectInfo_Serialize(swigCPtr, Serializer.getCPtr(serializer));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetConfidence(double conf) {
    csdocenginePINVOKE.DocBaseObjectInfo_SetConfidence(swigCPtr, conf);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetAcceptFlag(bool is_accepted) {
    csdocenginePINVOKE.DocBaseObjectInfo_SetAcceptFlag(swigCPtr, is_accepted);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetAttribute(string attr_name, string attr_value) {
    csdocenginePINVOKE.DocBaseObjectInfo_SetAttribute(swigCPtr, attr_name, attr_value);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveAttribute(string attr_name) {
    csdocenginePINVOKE.DocBaseObjectInfo_RemoveAttribute(swigCPtr, attr_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Polygon GetGeometry() {
    Polygon ret = new Polygon(csdocenginePINVOKE.DocBaseObjectInfo_GetGeometry(swigCPtr), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Polygon GetMutableGeometry() {
    Polygon ret = new Polygon(csdocenginePINVOKE.DocBaseObjectInfo_GetMutableGeometry(swigCPtr), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetGeometry(Polygon geometry) {
    csdocenginePINVOKE.DocBaseObjectInfo_SetGeometry(swigCPtr, Polygon.getCPtr(geometry));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetViewID() {
    int ret = csdocenginePINVOKE.DocBaseObjectInfo_GetViewID(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetViewID(int view_id) {
    csdocenginePINVOKE.DocBaseObjectInfo_SetViewID(swigCPtr, view_id);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
