# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pydocengine
else:
    import _pydocengine

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_SwigPyIterator

    def value(self):
        return _pydocengine.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pydocengine.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pydocengine.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pydocengine.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pydocengine.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pydocengine.SwigPyIterator_copy(self)

    def next(self):
        return _pydocengine.SwigPyIterator_next(self)

    def __next__(self):
        return _pydocengine.SwigPyIterator___next__(self)

    def previous(self):
        return _pydocengine.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pydocengine.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pydocengine.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pydocengine.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pydocengine.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pydocengine.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pydocengine.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pydocengine.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pydocengine:
_pydocengine.SwigPyIterator_swigregister(SwigPyIterator)
class SerializationParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_SerializationParameters

    def __init__(self, *args):
        _pydocengine.SerializationParameters_swiginit(self, _pydocengine.new_SerializationParameters(*args))

    def HasIgnoredObjectType(self, object_type):
        return _pydocengine.SerializationParameters_HasIgnoredObjectType(self, object_type)

    def AddIgnoredObjectType(self, object_type):
        return _pydocengine.SerializationParameters_AddIgnoredObjectType(self, object_type)

    def RemoveIgnoredObjectType(self, object_type):
        return _pydocengine.SerializationParameters_RemoveIgnoredObjectType(self, object_type)

    def IgnoredObjectTypesBegin(self):
        return _pydocengine.SerializationParameters_IgnoredObjectTypesBegin(self)

    def IgnoredObjectTypesEnd(self):
        return _pydocengine.SerializationParameters_IgnoredObjectTypesEnd(self)

    def HasIgnoredKey(self, key):
        return _pydocengine.SerializationParameters_HasIgnoredKey(self, key)

    def AddIgnoredKey(self, key):
        return _pydocengine.SerializationParameters_AddIgnoredKey(self, key)

    def RemoveIgnoredKey(self, key):
        return _pydocengine.SerializationParameters_RemoveIgnoredKey(self, key)

    def IgnoredKeysBegin(self):
        return _pydocengine.SerializationParameters_IgnoredKeysBegin(self)

    def IgnoredKeysEnd(self):
        return _pydocengine.SerializationParameters_IgnoredKeysEnd(self)

# Register SerializationParameters in _pydocengine:
_pydocengine.SerializationParameters_swigregister(SerializationParameters)
class Serializer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_Serializer

    def Reset(self):
        return _pydocengine.Serializer_Reset(self)

    def GetCStr(self):
        return _pydocengine.Serializer_GetCStr(self)

    def SerializerType(self):
        return _pydocengine.Serializer_SerializerType(self)

    @staticmethod
    def CreateJSONSerializer(params):
        return _pydocengine.Serializer_CreateJSONSerializer(params)

# Register Serializer in _pydocengine:
_pydocengine.Serializer_swigregister(Serializer)
class Rectangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydocengine.Rectangle_swiginit(self, _pydocengine.new_Rectangle(*args))

    def Serialize(self, serializer):
        return _pydocengine.Rectangle_Serialize(self, serializer)
    x = property(_pydocengine.Rectangle_x_get, _pydocengine.Rectangle_x_set)
    y = property(_pydocengine.Rectangle_y_get, _pydocengine.Rectangle_y_set)
    width = property(_pydocengine.Rectangle_width_get, _pydocengine.Rectangle_width_set)
    height = property(_pydocengine.Rectangle_height_get, _pydocengine.Rectangle_height_set)
    __swig_destroy__ = _pydocengine.delete_Rectangle

# Register Rectangle in _pydocengine:
_pydocengine.Rectangle_swigregister(Rectangle)
class Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydocengine.Point_swiginit(self, _pydocengine.new_Point(*args))

    def Serialize(self, serializer):
        return _pydocengine.Point_Serialize(self, serializer)
    x = property(_pydocengine.Point_x_get, _pydocengine.Point_x_set)
    y = property(_pydocengine.Point_y_get, _pydocengine.Point_y_set)
    __swig_destroy__ = _pydocengine.delete_Point

# Register Point in _pydocengine:
_pydocengine.Point_swigregister(Point)
class Size(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydocengine.Size_swiginit(self, _pydocengine.new_Size(*args))

    def Serialize(self, serializer):
        return _pydocengine.Size_Serialize(self, serializer)
    width = property(_pydocengine.Size_width_get, _pydocengine.Size_width_set)
    height = property(_pydocengine.Size_height_get, _pydocengine.Size_height_set)
    __swig_destroy__ = _pydocengine.delete_Size

# Register Size in _pydocengine:
_pydocengine.Size_swigregister(Size)
class Quadrangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydocengine.Quadrangle_swiginit(self, _pydocengine.new_Quadrangle(*args))

    def GetPoint(self, index):
        return _pydocengine.Quadrangle_GetPoint(self, index)

    def GetMutablePoint(self, index):
        return _pydocengine.Quadrangle_GetMutablePoint(self, index)

    def SetPoint(self, index, p):
        return _pydocengine.Quadrangle_SetPoint(self, index, p)

    def GetBoundingRectangle(self):
        return _pydocengine.Quadrangle_GetBoundingRectangle(self)

    def Serialize(self, serializer):
        return _pydocengine.Quadrangle_Serialize(self, serializer)
    __swig_destroy__ = _pydocengine.delete_Quadrangle

# Register Quadrangle in _pydocengine:
_pydocengine.Quadrangle_swigregister(Quadrangle)
class QuadranglesMapIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.QuadranglesMapIterator_swiginit(self, _pydocengine.new_QuadranglesMapIterator(other))
    __swig_destroy__ = _pydocengine.delete_QuadranglesMapIterator

    def GetKey(self):
        return _pydocengine.QuadranglesMapIterator_GetKey(self)

    def GetValue(self):
        return _pydocengine.QuadranglesMapIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pydocengine.QuadranglesMapIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.QuadranglesMapIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.QuadranglesMapIterator___ne__(self, rvalue)

    def Advance(self):
        return _pydocengine.QuadranglesMapIterator_Advance(self)

# Register QuadranglesMapIterator in _pydocengine:
_pydocengine.QuadranglesMapIterator_swigregister(QuadranglesMapIterator)
class RectanglesVectorIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.RectanglesVectorIterator_swiginit(self, _pydocengine.new_RectanglesVectorIterator(other))
    __swig_destroy__ = _pydocengine.delete_RectanglesVectorIterator

    def GetValue(self):
        return _pydocengine.RectanglesVectorIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pydocengine.RectanglesVectorIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.RectanglesVectorIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.RectanglesVectorIterator___ne__(self, rvalue)

    def Advance(self):
        return _pydocengine.RectanglesVectorIterator_Advance(self)

# Register RectanglesVectorIterator in _pydocengine:
_pydocengine.RectanglesVectorIterator_swigregister(RectanglesVectorIterator)
class Polygon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydocengine.Polygon_swiginit(self, _pydocengine.new_Polygon(*args))
    __swig_destroy__ = _pydocengine.delete_Polygon

    def GetPointsCount(self):
        return _pydocengine.Polygon_GetPointsCount(self)

    def GetPoints(self):
        return _pydocengine.Polygon_GetPoints(self)

    def GetPoint(self, index):
        return _pydocengine.Polygon_GetPoint(self, index)

    def GetMutablePoint(self, index):
        return _pydocengine.Polygon_GetMutablePoint(self, index)

    def SetPoint(self, index, p):
        return _pydocengine.Polygon_SetPoint(self, index, p)

    def Resize(self, size):
        return _pydocengine.Polygon_Resize(self, size)

    def GetBoundingRectangle(self):
        return _pydocengine.Polygon_GetBoundingRectangle(self)

    def Serialize(self, serializer):
        return _pydocengine.Polygon_Serialize(self, serializer)

# Register Polygon in _pydocengine:
_pydocengine.Polygon_swigregister(Polygon)
class ProjectiveTransform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def CanCreate(*args):
        return _pydocengine.ProjectiveTransform_CanCreate(*args)

    @staticmethod
    def Create(*args):
        return _pydocengine.ProjectiveTransform_Create(*args)
    __swig_destroy__ = _pydocengine.delete_ProjectiveTransform

    def Clone(self):
        return _pydocengine.ProjectiveTransform_Clone(self)

    def TransformPoint(self, p):
        return _pydocengine.ProjectiveTransform_TransformPoint(self, p)

    def TransformQuad(self, q):
        return _pydocengine.ProjectiveTransform_TransformQuad(self, q)

    def TransformPolygon(self, poly):
        return _pydocengine.ProjectiveTransform_TransformPolygon(self, poly)

    def IsInvertable(self):
        return _pydocengine.ProjectiveTransform_IsInvertable(self)

    def Invert(self):
        return _pydocengine.ProjectiveTransform_Invert(self)

    def CloneInverted(self):
        return _pydocengine.ProjectiveTransform_CloneInverted(self)

    def Serialize(self, serializer):
        return _pydocengine.ProjectiveTransform_Serialize(self, serializer)

# Register ProjectiveTransform in _pydocengine:
_pydocengine.ProjectiveTransform_swigregister(ProjectiveTransform)
class MutableString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydocengine.MutableString_swiginit(self, _pydocengine.new_MutableString(*args))
    __swig_destroy__ = _pydocengine.delete_MutableString

    def __iadd__(self, other):
        return _pydocengine.MutableString___iadd__(self, other)

    def __add__(self, other):
        return _pydocengine.MutableString___add__(self, other)

    def GetCStr(self):
        return _pydocengine.MutableString_GetCStr(self)

    def GetLength(self):
        return _pydocengine.MutableString_GetLength(self)

    def Serialize(self, serializer):
        return _pydocengine.MutableString_Serialize(self, serializer)

# Register MutableString in _pydocengine:
_pydocengine.MutableString_swigregister(MutableString)
class OcrCharVariant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydocengine.OcrCharVariant_swiginit(self, _pydocengine.new_OcrCharVariant(*args))
    __swig_destroy__ = _pydocengine.delete_OcrCharVariant

    def GetCharacter(self):
        return _pydocengine.OcrCharVariant_GetCharacter(self)

    def SetCharacter(self, *args):
        return _pydocengine.OcrCharVariant_SetCharacter(self, *args)

    def GetConfidence(self):
        return _pydocengine.OcrCharVariant_GetConfidence(self)

    def SetConfidence(self, confidence):
        return _pydocengine.OcrCharVariant_SetConfidence(self, confidence)

    def GetInternalScore(self):
        return _pydocengine.OcrCharVariant_GetInternalScore(self)

    def SetInternalScore(self, internal_score):
        return _pydocengine.OcrCharVariant_SetInternalScore(self, internal_score)

    def Serialize(self, serializer):
        return _pydocengine.OcrCharVariant_Serialize(self, serializer)

# Register OcrCharVariant in _pydocengine:
_pydocengine.OcrCharVariant_swigregister(OcrCharVariant)
class OcrChar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydocengine.OcrChar_swiginit(self, _pydocengine.new_OcrChar(*args))
    __swig_destroy__ = _pydocengine.delete_OcrChar

    def GetVariantsCount(self):
        return _pydocengine.OcrChar_GetVariantsCount(self)

    def GetVariants(self):
        return _pydocengine.OcrChar_GetVariants(self)

    def GetVariant(self, index):
        return _pydocengine.OcrChar_GetVariant(self, index)

    def GetMutableVariant(self, index):
        return _pydocengine.OcrChar_GetMutableVariant(self, index)

    def SetVariant(self, index, v):
        return _pydocengine.OcrChar_SetVariant(self, index, v)

    def Resize(self, size):
        return _pydocengine.OcrChar_Resize(self, size)

    def GetIsHighlighted(self):
        return _pydocengine.OcrChar_GetIsHighlighted(self)

    def SetIsHighlighted(self, is_highlighted):
        return _pydocengine.OcrChar_SetIsHighlighted(self, is_highlighted)

    def GetQuadrangle(self):
        return _pydocengine.OcrChar_GetQuadrangle(self)

    def GetMutableQuadrangle(self):
        return _pydocengine.OcrChar_GetMutableQuadrangle(self)

    def SetQuadrangle(self, quad):
        return _pydocengine.OcrChar_SetQuadrangle(self, quad)

    def SortVariants(self):
        return _pydocengine.OcrChar_SortVariants(self)

    def GetFirstVariant(self):
        return _pydocengine.OcrChar_GetFirstVariant(self)

    def Serialize(self, serializer):
        return _pydocengine.OcrChar_Serialize(self, serializer)

# Register OcrChar in _pydocengine:
_pydocengine.OcrChar_swigregister(OcrChar)
class OcrString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydocengine.OcrString_swiginit(self, _pydocengine.new_OcrString(*args))
    __swig_destroy__ = _pydocengine.delete_OcrString

    def GetCharsCount(self):
        return _pydocengine.OcrString_GetCharsCount(self)

    def GetChars(self):
        return _pydocengine.OcrString_GetChars(self)

    def GetChar(self, index):
        return _pydocengine.OcrString_GetChar(self, index)

    def GetMutableChar(self, index):
        return _pydocengine.OcrString_GetMutableChar(self, index)

    def SetChar(self, index, chr):
        return _pydocengine.OcrString_SetChar(self, index, chr)

    def AppendChar(self, chr):
        return _pydocengine.OcrString_AppendChar(self, chr)

    def AppendString(self, str):
        return _pydocengine.OcrString_AppendString(self, str)

    def Resize(self, size):
        return _pydocengine.OcrString_Resize(self, size)

    def GetQuadrangleByIndex(self, idx):
        return _pydocengine.OcrString_GetQuadrangleByIndex(self, idx)

    def GetBestVariantConfidenceByIndex(self, idx):
        return _pydocengine.OcrString_GetBestVariantConfidenceByIndex(self, idx)

    def SortVariants(self):
        return _pydocengine.OcrString_SortVariants(self)

    def GetFirstString(self):
        return _pydocengine.OcrString_GetFirstString(self)

    def UnpackChars(self):
        return _pydocengine.OcrString_UnpackChars(self)

    def RepackChars(self):
        return _pydocengine.OcrString_RepackChars(self)

    def Serialize(self, serializer):
        return _pydocengine.OcrString_Serialize(self, serializer)

# Register OcrString in _pydocengine:
_pydocengine.OcrString_swigregister(OcrString)
class ByteString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_ByteString

    def __init__(self, *args):
        _pydocengine.ByteString_swiginit(self, _pydocengine.new_ByteString(*args))

    def swap(self, other):
        return _pydocengine.ByteString_swap(self, other)

    def GetLength(self):
        return _pydocengine.ByteString_GetLength(self)

    def GetRequiredBase64BufferLength(self):
        return _pydocengine.ByteString_GetRequiredBase64BufferLength(self)

    def CopyBase64ToBuffer(self, out_buffer, buffer_length):
        return _pydocengine.ByteString_CopyBase64ToBuffer(self, out_buffer, buffer_length)

    def GetBase64String(self):
        return _pydocengine.ByteString_GetBase64String(self)

    def GetRequiredHexBufferLength(self):
        return _pydocengine.ByteString_GetRequiredHexBufferLength(self)

    def CopyHexToBuffer(self, out_buffer, buffer_length):
        return _pydocengine.ByteString_CopyHexToBuffer(self, out_buffer, buffer_length)

    def GetHexString(self):
        return _pydocengine.ByteString_GetHexString(self)

# Register ByteString in _pydocengine:
_pydocengine.ByteString_swigregister(ByteString)
class ImagesMapIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.ImagesMapIterator_swiginit(self, _pydocengine.new_ImagesMapIterator(other))
    __swig_destroy__ = _pydocengine.delete_ImagesMapIterator

    def GetKey(self):
        return _pydocengine.ImagesMapIterator_GetKey(self)

    def GetValue(self):
        return _pydocengine.ImagesMapIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pydocengine.ImagesMapIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.ImagesMapIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.ImagesMapIterator___ne__(self, rvalue)

    def Advance(self):
        return _pydocengine.ImagesMapIterator_Advance(self)

# Register ImagesMapIterator in _pydocengine:
_pydocengine.ImagesMapIterator_swigregister(ImagesMapIterator)
IPF_G = _pydocengine.IPF_G
IPF_GA = _pydocengine.IPF_GA
IPF_AG = _pydocengine.IPF_AG
IPF_RGB = _pydocengine.IPF_RGB
IPF_BGR = _pydocengine.IPF_BGR
IPF_BGRA = _pydocengine.IPF_BGRA
IPF_ARGB = _pydocengine.IPF_ARGB
IPF_RGBA = _pydocengine.IPF_RGBA
YUVTYPE_UNDEFINED = _pydocengine.YUVTYPE_UNDEFINED
YUVTYPE_NV21 = _pydocengine.YUVTYPE_NV21
YUVTYPE_420_888 = _pydocengine.YUVTYPE_420_888
class YUVDimensions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydocengine.YUVDimensions_swiginit(self, _pydocengine.new_YUVDimensions(*args))
    yPlanePixelStride = property(_pydocengine.YUVDimensions_yPlanePixelStride_get, _pydocengine.YUVDimensions_yPlanePixelStride_set)
    yPlaneRowStride = property(_pydocengine.YUVDimensions_yPlaneRowStride_get, _pydocengine.YUVDimensions_yPlaneRowStride_set)
    uPlanePixelStride = property(_pydocengine.YUVDimensions_uPlanePixelStride_get, _pydocengine.YUVDimensions_uPlanePixelStride_set)
    uPlaneRowStride = property(_pydocengine.YUVDimensions_uPlaneRowStride_get, _pydocengine.YUVDimensions_uPlaneRowStride_set)
    vPlanePixelStride = property(_pydocengine.YUVDimensions_vPlanePixelStride_get, _pydocengine.YUVDimensions_vPlanePixelStride_set)
    vPlaneRowStride = property(_pydocengine.YUVDimensions_vPlaneRowStride_get, _pydocengine.YUVDimensions_vPlaneRowStride_set)
    width = property(_pydocengine.YUVDimensions_width_get, _pydocengine.YUVDimensions_width_set)
    height = property(_pydocengine.YUVDimensions_height_get, _pydocengine.YUVDimensions_height_set)
    type = property(_pydocengine.YUVDimensions_type_get, _pydocengine.YUVDimensions_type_set)
    __swig_destroy__ = _pydocengine.delete_YUVDimensions

# Register YUVDimensions in _pydocengine:
_pydocengine.YUVDimensions_swigregister(YUVDimensions)
class Image(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def GetNumberOfPages(image_filename):
        return _pydocengine.Image_GetNumberOfPages(image_filename)

    @staticmethod
    def GetImagePageName(image_filename, page_number):
        return _pydocengine.Image_GetImagePageName(image_filename, page_number)

    @staticmethod
    def CreateEmpty():
        return _pydocengine.Image_CreateEmpty()

    @staticmethod
    def FromFile(*args):
        return _pydocengine.Image_FromFile(*args)

    @staticmethod
    def FromFileBuffer(*args):
        return _pydocengine.Image_FromFileBuffer(*args)

    @staticmethod
    def FromBuffer(raw_data, width, height, stride, channels):
        return _pydocengine.Image_FromBuffer(raw_data, width, height, stride, channels)

    @staticmethod
    def FromBufferExtended(raw_data, width, height, stride, pixel_format, bytes_per_channel):
        return _pydocengine.Image_FromBufferExtended(raw_data, width, height, stride, pixel_format, bytes_per_channel)

    @staticmethod
    def FromYUVBuffer(yuv_data, width, height):
        return _pydocengine.Image_FromYUVBuffer(yuv_data, width, height)

    @staticmethod
    def FromYUV(y_plane, u_plane, v_plane, dimensions):
        return _pydocengine.Image_FromYUV(y_plane, u_plane, v_plane, dimensions)

    @staticmethod
    def FromBase64Buffer(*args):
        return _pydocengine.Image_FromBase64Buffer(*args)
    __swig_destroy__ = _pydocengine.delete_Image

    def GetNumberOfLayers(self):
        return _pydocengine.Image_GetNumberOfLayers(self)

    def GetLayer(self, name):
        return _pydocengine.Image_GetLayer(self, name)

    def GetLayerPtr(self, name):
        return _pydocengine.Image_GetLayerPtr(self, name)

    def LayersBegin(self):
        return _pydocengine.Image_LayersBegin(self)

    def LayersEnd(self):
        return _pydocengine.Image_LayersEnd(self)

    def HasLayer(self, name):
        return _pydocengine.Image_HasLayer(self, name)

    def HasLayers(self):
        return _pydocengine.Image_HasLayers(self)

    def RemoveLayer(self, name):
        return _pydocengine.Image_RemoveLayer(self, name)

    def RemoveLayers(self):
        return _pydocengine.Image_RemoveLayers(self)

    def SetLayer(self, name, image):
        return _pydocengine.Image_SetLayer(self, name, image)

    def SetLayerWithOwnership(self, name, image):
        return _pydocengine.Image_SetLayerWithOwnership(self, name, image)

    def CloneDeep(self):
        return _pydocengine.Image_CloneDeep(self)

    def CloneShallow(self):
        return _pydocengine.Image_CloneShallow(self)

    def Clear(self):
        return _pydocengine.Image_Clear(self)

    def GetRequiredBufferLength(self):
        return _pydocengine.Image_GetRequiredBufferLength(self)

    def CopyToBuffer(self, buffer):
        return _pydocengine.Image_CopyToBuffer(self, buffer)

    def Save(self, image_filename):
        return _pydocengine.Image_Save(self, image_filename)

    def GetRequiredBase64BufferLength(self):
        return _pydocengine.Image_GetRequiredBase64BufferLength(self)

    def CopyBase64ToBuffer(self, out_buffer, buffer_length):
        return _pydocengine.Image_CopyBase64ToBuffer(self, out_buffer, buffer_length)

    def GetBase64String(self):
        return _pydocengine.Image_GetBase64String(self)

    def EstimateFocusScore(self, quantile=0.95):
        return _pydocengine.Image_EstimateFocusScore(self, quantile)

    def Resize(self, new_size):
        return _pydocengine.Image_Resize(self, new_size)

    def CloneResized(self, new_size):
        return _pydocengine.Image_CloneResized(self, new_size)

    def Crop(self, *args):
        return _pydocengine.Image_Crop(self, *args)

    def CloneCropped(self, *args):
        return _pydocengine.Image_CloneCropped(self, *args)

    def CloneCroppedShallow(self, rect):
        return _pydocengine.Image_CloneCroppedShallow(self, rect)

    def Mask(self, *args):
        return _pydocengine.Image_Mask(self, *args)

    def CloneMasked(self, *args):
        return _pydocengine.Image_CloneMasked(self, *args)

    def Fill(self, *args):
        return _pydocengine.Image_Fill(self, *args)

    def CloneFilled(self, *args):
        return _pydocengine.Image_CloneFilled(self, *args)

    def FlipVertical(self):
        return _pydocengine.Image_FlipVertical(self)

    def CloneFlippedVertical(self):
        return _pydocengine.Image_CloneFlippedVertical(self)

    def FlipHorizontal(self):
        return _pydocengine.Image_FlipHorizontal(self)

    def CloneFlippedHorizontal(self):
        return _pydocengine.Image_CloneFlippedHorizontal(self)

    def Rotate90(self, times):
        return _pydocengine.Image_Rotate90(self, times)

    def CloneRotated90(self, times):
        return _pydocengine.Image_CloneRotated90(self, times)

    def AverageChannels(self):
        return _pydocengine.Image_AverageChannels(self)

    def CloneAveragedChannels(self):
        return _pydocengine.Image_CloneAveragedChannels(self)

    def Invert(self):
        return _pydocengine.Image_Invert(self)

    def CloneInverted(self):
        return _pydocengine.Image_CloneInverted(self)

    def GetWidth(self):
        return _pydocengine.Image_GetWidth(self)

    def GetHeight(self):
        return _pydocengine.Image_GetHeight(self)

    def GetSize(self):
        return _pydocengine.Image_GetSize(self)

    def GetStride(self):
        return _pydocengine.Image_GetStride(self)

    def GetChannels(self):
        return _pydocengine.Image_GetChannels(self)

    def IsMemoryOwner(self):
        return _pydocengine.Image_IsMemoryOwner(self)

    def ForceMemoryOwner(self):
        return _pydocengine.Image_ForceMemoryOwner(self)

    def Serialize(self, serializer):
        return _pydocengine.Image_Serialize(self, serializer)

# Register Image in _pydocengine:
_pydocengine.Image_swigregister(Image)
class StringsVectorIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.StringsVectorIterator_swiginit(self, _pydocengine.new_StringsVectorIterator(other))
    __swig_destroy__ = _pydocengine.delete_StringsVectorIterator

    def GetValue(self):
        return _pydocengine.StringsVectorIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pydocengine.StringsVectorIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.StringsVectorIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.StringsVectorIterator___ne__(self, rvalue)

    def Advance(self):
        return _pydocengine.StringsVectorIterator_Advance(self)

# Register StringsVectorIterator in _pydocengine:
_pydocengine.StringsVectorIterator_swigregister(StringsVectorIterator)
class StringsSetIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.StringsSetIterator_swiginit(self, _pydocengine.new_StringsSetIterator(other))
    __swig_destroy__ = _pydocengine.delete_StringsSetIterator

    def GetValue(self):
        return _pydocengine.StringsSetIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pydocengine.StringsSetIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.StringsSetIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.StringsSetIterator___ne__(self, rvalue)

    def Advance(self):
        return _pydocengine.StringsSetIterator_Advance(self)

# Register StringsSetIterator in _pydocengine:
_pydocengine.StringsSetIterator_swigregister(StringsSetIterator)
class StringsMapIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.StringsMapIterator_swiginit(self, _pydocengine.new_StringsMapIterator(other))
    __swig_destroy__ = _pydocengine.delete_StringsMapIterator

    def GetKey(self):
        return _pydocengine.StringsMapIterator_GetKey(self)

    def GetValue(self):
        return _pydocengine.StringsMapIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pydocengine.StringsMapIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.StringsMapIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.StringsMapIterator___ne__(self, rvalue)

    def Advance(self):
        return _pydocengine.StringsMapIterator_Advance(self)

# Register StringsMapIterator in _pydocengine:
_pydocengine.StringsMapIterator_swigregister(StringsMapIterator)
class StringsSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_StringsSet

    def GetStringsCount(self):
        return _pydocengine.StringsSet_GetStringsCount(self)

    def HasString(self, string):
        return _pydocengine.StringsSet_HasString(self, string)

    def StringsBegin(self):
        return _pydocengine.StringsSet_StringsBegin(self)

    def StringsEnd(self):
        return _pydocengine.StringsSet_StringsEnd(self)

# Register StringsSet in _pydocengine:
_pydocengine.StringsSet_swigregister(StringsSet)
class DocSceneInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SceneOriginType_UNDEFINED = _pydocengine.DocSceneInfo_SceneOriginType_UNDEFINED
    SceneOriginType_DIGITAL_BORN = _pydocengine.DocSceneInfo_SceneOriginType_DIGITAL_BORN
    SceneOriginType_OPTICAL_SCANNER = _pydocengine.DocSceneInfo_SceneOriginType_OPTICAL_SCANNER
    SceneOriginType_OPTICAL_CAMERA = _pydocengine.DocSceneInfo_SceneOriginType_OPTICAL_CAMERA
    __swig_destroy__ = _pydocengine.delete_DocSceneInfo

    def IsGarbage(self):
        return _pydocengine.DocSceneInfo_IsGarbage(self)

    def SceneID(self):
        return _pydocengine.DocSceneInfo_SceneID(self)

    def GarbageReasonsCount(self):
        return _pydocengine.DocSceneInfo_GarbageReasonsCount(self)

    def GarbageReason(self, idx):
        return _pydocengine.DocSceneInfo_GarbageReason(self, idx)

    def GetSceneOriginType(self):
        return _pydocengine.DocSceneInfo_GetSceneOriginType(self)

# Register DocSceneInfo in _pydocengine:
_pydocengine.DocSceneInfo_swigregister(DocSceneInfo)
class DocTagsCollection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocTagsCollection

    def GetTagsCount(self):
        return _pydocengine.DocTagsCollection_GetTagsCount(self)

    def HasTag(self, tag):
        return _pydocengine.DocTagsCollection_HasTag(self, tag)

    def AddTag(self, tag):
        return _pydocengine.DocTagsCollection_AddTag(self, tag)

    def RemoveTag(self, tag):
        return _pydocengine.DocTagsCollection_RemoveTag(self, tag)

    def TagsBegin(self):
        return _pydocengine.DocTagsCollection_TagsBegin(self)

    def TagsEnd(self):
        return _pydocengine.DocTagsCollection_TagsEnd(self)

    def Serialize(self, serializer):
        return _pydocengine.DocTagsCollection_Serialize(self, serializer)

    @staticmethod
    def Create():
        return _pydocengine.DocTagsCollection_Create()

# Register DocTagsCollection in _pydocengine:
_pydocengine.DocTagsCollection_swigregister(DocTagsCollection)
class DocBaseObjectInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocBaseObjectInfo

    def GetConfidence(self):
        return _pydocengine.DocBaseObjectInfo_GetConfidence(self)

    def GetAcceptFlag(self):
        return _pydocengine.DocBaseObjectInfo_GetAcceptFlag(self)

    def GetGeometryOnPage(self):
        return _pydocengine.DocBaseObjectInfo_GetGeometryOnPage(self)

    def GetGeometryOnPagePtr(self):
        return _pydocengine.DocBaseObjectInfo_GetGeometryOnPagePtr(self)

    def GetGeometryOnScene(self):
        return _pydocengine.DocBaseObjectInfo_GetGeometryOnScene(self)

    def GetGeometryOnScenePtr(self):
        return _pydocengine.DocBaseObjectInfo_GetGeometryOnScenePtr(self)

    def GetAttributesCount(self):
        return _pydocengine.DocBaseObjectInfo_GetAttributesCount(self)

    def HasAttribute(self, attr_name):
        return _pydocengine.DocBaseObjectInfo_HasAttribute(self, attr_name)

    def GetAttribute(self, attr_name):
        return _pydocengine.DocBaseObjectInfo_GetAttribute(self, attr_name)

    def AttributesBegin(self):
        return _pydocengine.DocBaseObjectInfo_AttributesBegin(self)

    def AttributesEnd(self):
        return _pydocengine.DocBaseObjectInfo_AttributesEnd(self)

    def Serialize(self, serializer):
        return _pydocengine.DocBaseObjectInfo_Serialize(self, serializer)

    def SetConfidence(self, conf):
        return _pydocengine.DocBaseObjectInfo_SetConfidence(self, conf)

    def SetAcceptFlag(self, is_accepted):
        return _pydocengine.DocBaseObjectInfo_SetAcceptFlag(self, is_accepted)

    def SetAttribute(self, attr_name, attr_value):
        return _pydocengine.DocBaseObjectInfo_SetAttribute(self, attr_name, attr_value)

    def RemoveAttribute(self, attr_name):
        return _pydocengine.DocBaseObjectInfo_RemoveAttribute(self, attr_name)

    def GetGeometry(self):
        return _pydocengine.DocBaseObjectInfo_GetGeometry(self)

    def GetMutableGeometry(self):
        return _pydocengine.DocBaseObjectInfo_GetMutableGeometry(self)

    def SetGeometry(self, geometry):
        return _pydocengine.DocBaseObjectInfo_SetGeometry(self, geometry)

    def GetViewID(self):
        return _pydocengine.DocBaseObjectInfo_GetViewID(self)

    def SetViewID(self, view_id):
        return _pydocengine.DocBaseObjectInfo_SetViewID(self, view_id)

# Register DocBaseObjectInfo in _pydocengine:
_pydocengine.DocBaseObjectInfo_swigregister(DocBaseObjectInfo)
class DocBasicObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def BaseClassNameStatic():
        return _pydocengine.DocBasicObject_BaseClassNameStatic()
    __swig_destroy__ = _pydocengine.delete_DocBasicObject

    def ObjectType(self):
        return _pydocengine.DocBasicObject_ObjectType(self)

    def GetBaseObjectInfo(self):
        return _pydocengine.DocBasicObject_GetBaseObjectInfo(self)

    def GetMutableBaseObjectInfo(self):
        return _pydocengine.DocBasicObject_GetMutableBaseObjectInfo(self)

    def Serialize(self, serializer):
        return _pydocengine.DocBasicObject_Serialize(self, serializer)

# Register DocBasicObject in _pydocengine:
_pydocengine.DocBasicObject_swigregister(DocBasicObject)
class DocTextObject(DocBasicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocTextObject

    @staticmethod
    def ObjectTypeStatic():
        return _pydocengine.DocTextObject_ObjectTypeStatic()

    def GetOcrString(self):
        return _pydocengine.DocTextObject_GetOcrString(self)

    def GetMutableOcrString(self):
        return _pydocengine.DocTextObject_GetMutableOcrString(self)

    def SetOcrString(self, ocrstring):
        return _pydocengine.DocTextObject_SetOcrString(self, ocrstring)

# Register DocTextObject in _pydocengine:
_pydocengine.DocTextObject_swigregister(DocTextObject)
class DocForensicCheckObject(DocBasicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocForensicCheckObject

    @staticmethod
    def ObjectTypeStatic():
        return _pydocengine.DocForensicCheckObject_ObjectTypeStatic()

    def GetOcrString(self):
        return _pydocengine.DocForensicCheckObject_GetOcrString(self)

    def GetMutableOcrString(self):
        return _pydocengine.DocForensicCheckObject_GetMutableOcrString(self)

# Register DocForensicCheckObject in _pydocengine:
_pydocengine.DocForensicCheckObject_swigregister(DocForensicCheckObject)
class DocCheckboxObject(DocBasicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocCheckboxObject

    @staticmethod
    def ObjectTypeStatic():
        return _pydocengine.DocCheckboxObject_ObjectTypeStatic()

    def GetOcrString(self):
        return _pydocengine.DocCheckboxObject_GetOcrString(self)

    def GetMutableOcrString(self):
        return _pydocengine.DocCheckboxObject_GetMutableOcrString(self)

    def SetOcrString(self, ocrstring):
        return _pydocengine.DocCheckboxObject_SetOcrString(self, ocrstring)

# Register DocCheckboxObject in _pydocengine:
_pydocengine.DocCheckboxObject_swigregister(DocCheckboxObject)
class DocTemplateObject(DocBasicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocTemplateObject

    @staticmethod
    def ObjectTypeStatic():
        return _pydocengine.DocTemplateObject_ObjectTypeStatic()

# Register DocTemplateObject in _pydocengine:
_pydocengine.DocTemplateObject_swigregister(DocTemplateObject)
class DocLineObject(DocBasicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocLineObject

    @staticmethod
    def ObjectTypeStatic():
        return _pydocengine.DocLineObject_ObjectTypeStatic()

# Register DocLineObject in _pydocengine:
_pydocengine.DocLineObject_swigregister(DocLineObject)
class DocZoneObject(DocBasicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocZoneObject

    @staticmethod
    def ObjectTypeStatic():
        return _pydocengine.DocZoneObject_ObjectTypeStatic()

    def GetSize(self):
        return _pydocengine.DocZoneObject_GetSize(self)

    def GetMutableSize(self):
        return _pydocengine.DocZoneObject_GetMutableSize(self)

    def SetSize(self, size):
        return _pydocengine.DocZoneObject_SetSize(self, size)

# Register DocZoneObject in _pydocengine:
_pydocengine.DocZoneObject_swigregister(DocZoneObject)
class DocMultiStringTextObject(DocBasicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocMultiStringTextObject

    @staticmethod
    def ObjectTypeStatic():
        return _pydocengine.DocMultiStringTextObject_ObjectTypeStatic()

    def GetStringsCount(self):
        return _pydocengine.DocMultiStringTextObject_GetStringsCount(self)

    def SetStringsCount(self, count):
        return _pydocengine.DocMultiStringTextObject_SetStringsCount(self, count)

    def GetStringObject(self, index):
        return _pydocengine.DocMultiStringTextObject_GetStringObject(self, index)

    def GetMutableStringObject(self, index):
        return _pydocengine.DocMultiStringTextObject_GetMutableStringObject(self, index)

    def SetStringObject(self, index, text_object):
        return _pydocengine.DocMultiStringTextObject_SetStringObject(self, index, text_object)

# Register DocMultiStringTextObject in _pydocengine:
_pydocengine.DocMultiStringTextObject_swigregister(DocMultiStringTextObject)
class DocMetaObject(DocBasicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocMetaObject

    @staticmethod
    def ObjectTypeStatic():
        return _pydocengine.DocMetaObject_ObjectTypeStatic()

    def GetOcrString(self):
        return _pydocengine.DocMetaObject_GetOcrString(self)

    def GetMutableOcrString(self):
        return _pydocengine.DocMetaObject_GetMutableOcrString(self)

    def SetOcrString(self, ocrstring):
        return _pydocengine.DocMetaObject_SetOcrString(self, ocrstring)

# Register DocMetaObject in _pydocengine:
_pydocengine.DocMetaObject_swigregister(DocMetaObject)
class DocTableObject(DocBasicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocTableObject

    @staticmethod
    def ObjectTypeStatic():
        return _pydocengine.DocTableObject_ObjectTypeStatic()

    def GetRowsCount(self):
        return _pydocengine.DocTableObject_GetRowsCount(self)

    def GetColsCount(self, row):
        return _pydocengine.DocTableObject_GetColsCount(self, row)

    def GetCell(self, row, col):
        return _pydocengine.DocTableObject_GetCell(self, row, col)

    def GetMutableCell(self, row, col):
        return _pydocengine.DocTableObject_GetMutableCell(self, row, col)

    def SetCell(self, row, col, multi_string_text_object):
        return _pydocengine.DocTableObject_SetCell(self, row, col, multi_string_text_object)

    def ResizeRows(self, rows):
        return _pydocengine.DocTableObject_ResizeRows(self, rows)

    def ResizeCols(self, row, cols):
        return _pydocengine.DocTableObject_ResizeCols(self, row, cols)

    def GetColName(self, col, row):
        return _pydocengine.DocTableObject_GetColName(self, col, row)

    def SetColName(self, col, first_row, col_name):
        return _pydocengine.DocTableObject_SetColName(self, col, first_row, col_name)

# Register DocTableObject in _pydocengine:
_pydocengine.DocTableObject_swigregister(DocTableObject)
class DocImageObject(DocBasicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocImageObject

    @staticmethod
    def ObjectTypeStatic():
        return _pydocengine.DocImageObject_ObjectTypeStatic()

# Register DocImageObject in _pydocengine:
_pydocengine.DocImageObject_swigregister(DocImageObject)
class DocBarcodeObject(DocBasicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocBarcodeObject

    @staticmethod
    def ObjectTypeStatic():
        return _pydocengine.DocBarcodeObject_ObjectTypeStatic()

    def GetDecodedString(self):
        return _pydocengine.DocBarcodeObject_GetDecodedString(self)

    def GetMutableDecodedString(self):
        return _pydocengine.DocBarcodeObject_GetMutableDecodedString(self)

    def SetDecodedString(self, decstring):
        return _pydocengine.DocBarcodeObject_SetDecodedString(self, decstring)

# Register DocBarcodeObject in _pydocengine:
_pydocengine.DocBarcodeObject_swigregister(DocBarcodeObject)
class DocMarkObject(DocBasicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocMarkObject

    @staticmethod
    def ObjectTypeStatic():
        return _pydocengine.DocMarkObject_ObjectTypeStatic()

# Register DocMarkObject in _pydocengine:
_pydocengine.DocMarkObject_swigregister(DocMarkObject)
class DocTextObjectsCrossPageIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocTextObjectsCrossPageIterator_swiginit(self, _pydocengine.new_DocTextObjectsCrossPageIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocTextObjectsCrossPageIterator

    def GetPhysicalPageID(self):
        return _pydocengine.DocTextObjectsCrossPageIterator_GetPhysicalPageID(self)

    def GetObjectID(self):
        return _pydocengine.DocTextObjectsCrossPageIterator_GetObjectID(self)

    def GetTextObject(self):
        return _pydocengine.DocTextObjectsCrossPageIterator_GetTextObject(self)

    def Advance(self):
        return _pydocengine.DocTextObjectsCrossPageIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocTextObjectsCrossPageIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocTextObjectsCrossPageIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocTextObjectsCrossPageIterator___ne__(self, rvalue)

# Register DocTextObjectsCrossPageIterator in _pydocengine:
_pydocengine.DocTextObjectsCrossPageIterator_swigregister(DocTextObjectsCrossPageIterator)
class DocForensicCheckObjectsCrossPageIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocForensicCheckObjectsCrossPageIterator_swiginit(self, _pydocengine.new_DocForensicCheckObjectsCrossPageIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocForensicCheckObjectsCrossPageIterator

    def GetPhysicalPageID(self):
        return _pydocengine.DocForensicCheckObjectsCrossPageIterator_GetPhysicalPageID(self)

    def GetForensicCheckObject(self):
        return _pydocengine.DocForensicCheckObjectsCrossPageIterator_GetForensicCheckObject(self)

    def Advance(self):
        return _pydocengine.DocForensicCheckObjectsCrossPageIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocForensicCheckObjectsCrossPageIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocForensicCheckObjectsCrossPageIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocForensicCheckObjectsCrossPageIterator___ne__(self, rvalue)

# Register DocForensicCheckObjectsCrossPageIterator in _pydocengine:
_pydocengine.DocForensicCheckObjectsCrossPageIterator_swigregister(DocForensicCheckObjectsCrossPageIterator)
class DocImageObjectsCrossPageIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocImageObjectsCrossPageIterator_swiginit(self, _pydocengine.new_DocImageObjectsCrossPageIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocImageObjectsCrossPageIterator

    def GetPhysicalPageID(self):
        return _pydocengine.DocImageObjectsCrossPageIterator_GetPhysicalPageID(self)

    def GetObjectID(self):
        return _pydocengine.DocImageObjectsCrossPageIterator_GetObjectID(self)

    def GetImageObject(self):
        return _pydocengine.DocImageObjectsCrossPageIterator_GetImageObject(self)

    def Advance(self):
        return _pydocengine.DocImageObjectsCrossPageIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocImageObjectsCrossPageIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocImageObjectsCrossPageIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocImageObjectsCrossPageIterator___ne__(self, rvalue)

# Register DocImageObjectsCrossPageIterator in _pydocengine:
_pydocengine.DocImageObjectsCrossPageIterator_swigregister(DocImageObjectsCrossPageIterator)
class DocTableObjectsCrossPageIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocTableObjectsCrossPageIterator_swiginit(self, _pydocengine.new_DocTableObjectsCrossPageIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocTableObjectsCrossPageIterator

    def GetPhysicalPageID(self):
        return _pydocengine.DocTableObjectsCrossPageIterator_GetPhysicalPageID(self)

    def GetObjectID(self):
        return _pydocengine.DocTableObjectsCrossPageIterator_GetObjectID(self)

    def GetTableObject(self):
        return _pydocengine.DocTableObjectsCrossPageIterator_GetTableObject(self)

    def Advance(self):
        return _pydocengine.DocTableObjectsCrossPageIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocTableObjectsCrossPageIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocTableObjectsCrossPageIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocTableObjectsCrossPageIterator___ne__(self, rvalue)

# Register DocTableObjectsCrossPageIterator in _pydocengine:
_pydocengine.DocTableObjectsCrossPageIterator_swigregister(DocTableObjectsCrossPageIterator)
class DocCheckboxObjectsCrossPageIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocCheckboxObjectsCrossPageIterator_swiginit(self, _pydocengine.new_DocCheckboxObjectsCrossPageIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocCheckboxObjectsCrossPageIterator

    def GetPhysicalPageID(self):
        return _pydocengine.DocCheckboxObjectsCrossPageIterator_GetPhysicalPageID(self)

    def GetCheckboxObject(self):
        return _pydocengine.DocCheckboxObjectsCrossPageIterator_GetCheckboxObject(self)

    def Advance(self):
        return _pydocengine.DocCheckboxObjectsCrossPageIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocCheckboxObjectsCrossPageIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocCheckboxObjectsCrossPageIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocCheckboxObjectsCrossPageIterator___ne__(self, rvalue)

# Register DocCheckboxObjectsCrossPageIterator in _pydocengine:
_pydocengine.DocCheckboxObjectsCrossPageIterator_swigregister(DocCheckboxObjectsCrossPageIterator)
class DocMetaObjectsCrossPageIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocMetaObjectsCrossPageIterator_swiginit(self, _pydocengine.new_DocMetaObjectsCrossPageIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocMetaObjectsCrossPageIterator

    def GetPhysicalPageID(self):
        return _pydocengine.DocMetaObjectsCrossPageIterator_GetPhysicalPageID(self)

    def GetMetaObject(self):
        return _pydocengine.DocMetaObjectsCrossPageIterator_GetMetaObject(self)

    def GetMetaObjectPtr(self):
        return _pydocengine.DocMetaObjectsCrossPageIterator_GetMetaObjectPtr(self)

    def Advance(self):
        return _pydocengine.DocMetaObjectsCrossPageIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocMetaObjectsCrossPageIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocMetaObjectsCrossPageIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocMetaObjectsCrossPageIterator___ne__(self, rvalue)

# Register DocMetaObjectsCrossPageIterator in _pydocengine:
_pydocengine.DocMetaObjectsCrossPageIterator_swigregister(DocMetaObjectsCrossPageIterator)
class DocBarcodeObjectsCrossPageIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocBarcodeObjectsCrossPageIterator_swiginit(self, _pydocengine.new_DocBarcodeObjectsCrossPageIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocBarcodeObjectsCrossPageIterator

    def GetPhysicalPageID(self):
        return _pydocengine.DocBarcodeObjectsCrossPageIterator_GetPhysicalPageID(self)

    def GetBarcodeObject(self):
        return _pydocengine.DocBarcodeObjectsCrossPageIterator_GetBarcodeObject(self)

    def GetBarcodeObjectPtr(self):
        return _pydocengine.DocBarcodeObjectsCrossPageIterator_GetBarcodeObjectPtr(self)

    def Advance(self):
        return _pydocengine.DocBarcodeObjectsCrossPageIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocBarcodeObjectsCrossPageIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocBarcodeObjectsCrossPageIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocBarcodeObjectsCrossPageIterator___ne__(self, rvalue)

# Register DocBarcodeObjectsCrossPageIterator in _pydocengine:
_pydocengine.DocBarcodeObjectsCrossPageIterator_swigregister(DocBarcodeObjectsCrossPageIterator)
class DocBasicObjectsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocBasicObjectsIterator_swiginit(self, _pydocengine.new_DocBasicObjectsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocBasicObjectsIterator

    def GetID(self):
        return _pydocengine.DocBasicObjectsIterator_GetID(self)

    def GetBasicObject(self):
        return _pydocengine.DocBasicObjectsIterator_GetBasicObject(self)

    def Advance(self):
        return _pydocengine.DocBasicObjectsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocBasicObjectsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocBasicObjectsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocBasicObjectsIterator___ne__(self, rvalue)

    def GetTags(self):
        return _pydocengine.DocBasicObjectsIterator_GetTags(self)

# Register DocBasicObjectsIterator in _pydocengine:
_pydocengine.DocBasicObjectsIterator_swigregister(DocBasicObjectsIterator)
class DocTextObjectsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocTextObjectsIterator_swiginit(self, _pydocengine.new_DocTextObjectsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocTextObjectsIterator

    def GetTextObject(self):
        return _pydocengine.DocTextObjectsIterator_GetTextObject(self)

    def Advance(self):
        return _pydocengine.DocTextObjectsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocTextObjectsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocTextObjectsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocTextObjectsIterator___ne__(self, rvalue)

# Register DocTextObjectsIterator in _pydocengine:
_pydocengine.DocTextObjectsIterator_swigregister(DocTextObjectsIterator)
class DocForensicCheckObjectsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocForensicCheckObjectsIterator_swiginit(self, _pydocengine.new_DocForensicCheckObjectsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocForensicCheckObjectsIterator

    def GetForensicCheckObject(self):
        return _pydocengine.DocForensicCheckObjectsIterator_GetForensicCheckObject(self)

    def Advance(self):
        return _pydocengine.DocForensicCheckObjectsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocForensicCheckObjectsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocForensicCheckObjectsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocForensicCheckObjectsIterator___ne__(self, rvalue)

# Register DocForensicCheckObjectsIterator in _pydocengine:
_pydocengine.DocForensicCheckObjectsIterator_swigregister(DocForensicCheckObjectsIterator)
class DocImageObjectsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocImageObjectsIterator_swiginit(self, _pydocengine.new_DocImageObjectsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocImageObjectsIterator

    def GetImageObject(self):
        return _pydocengine.DocImageObjectsIterator_GetImageObject(self)

    def Advance(self):
        return _pydocengine.DocImageObjectsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocImageObjectsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocImageObjectsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocImageObjectsIterator___ne__(self, rvalue)

# Register DocImageObjectsIterator in _pydocengine:
_pydocengine.DocImageObjectsIterator_swigregister(DocImageObjectsIterator)
class DocTableObjectsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocTableObjectsIterator_swiginit(self, _pydocengine.new_DocTableObjectsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocTableObjectsIterator

    def GetTableObject(self):
        return _pydocengine.DocTableObjectsIterator_GetTableObject(self)

    def Advance(self):
        return _pydocengine.DocTableObjectsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocTableObjectsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocTableObjectsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocTableObjectsIterator___ne__(self, rvalue)

# Register DocTableObjectsIterator in _pydocengine:
_pydocengine.DocTableObjectsIterator_swigregister(DocTableObjectsIterator)
class DocBarcodeObjectsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocBarcodeObjectsIterator_swiginit(self, _pydocengine.new_DocBarcodeObjectsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocBarcodeObjectsIterator

    def GetBarcodeObject(self):
        return _pydocengine.DocBarcodeObjectsIterator_GetBarcodeObject(self)

    def GetBarcodeObjectPtr(self):
        return _pydocengine.DocBarcodeObjectsIterator_GetBarcodeObjectPtr(self)

    def Advance(self):
        return _pydocengine.DocBarcodeObjectsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocBarcodeObjectsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocBarcodeObjectsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocBarcodeObjectsIterator___ne__(self, rvalue)

# Register DocBarcodeObjectsIterator in _pydocengine:
_pydocengine.DocBarcodeObjectsIterator_swigregister(DocBarcodeObjectsIterator)
class DocCheckboxObjectsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocCheckboxObjectsIterator_swiginit(self, _pydocengine.new_DocCheckboxObjectsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocCheckboxObjectsIterator

    def GetCheckboxObject(self):
        return _pydocengine.DocCheckboxObjectsIterator_GetCheckboxObject(self)

    def Advance(self):
        return _pydocengine.DocCheckboxObjectsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocCheckboxObjectsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocCheckboxObjectsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocCheckboxObjectsIterator___ne__(self, rvalue)

# Register DocCheckboxObjectsIterator in _pydocengine:
_pydocengine.DocCheckboxObjectsIterator_swigregister(DocCheckboxObjectsIterator)
class DocMetaObjectsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocMetaObjectsIterator_swiginit(self, _pydocengine.new_DocMetaObjectsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocMetaObjectsIterator

    def GetMetaObject(self):
        return _pydocengine.DocMetaObjectsIterator_GetMetaObject(self)

    def GetMetaObjectPtr(self):
        return _pydocengine.DocMetaObjectsIterator_GetMetaObjectPtr(self)

    def Advance(self):
        return _pydocengine.DocMetaObjectsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocMetaObjectsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocMetaObjectsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocMetaObjectsIterator___ne__(self, rvalue)

# Register DocMetaObjectsIterator in _pydocengine:
_pydocengine.DocMetaObjectsIterator_swigregister(DocMetaObjectsIterator)
class DocBasicObjectsMutableIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocBasicObjectsMutableIterator_swiginit(self, _pydocengine.new_DocBasicObjectsMutableIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocBasicObjectsMutableIterator

    def GetID(self):
        return _pydocengine.DocBasicObjectsMutableIterator_GetID(self)

    def GetBasicObject(self):
        return _pydocengine.DocBasicObjectsMutableIterator_GetBasicObject(self)

    def GetMutableBasicObject(self):
        return _pydocengine.DocBasicObjectsMutableIterator_GetMutableBasicObject(self)

    def GetTags(self):
        return _pydocengine.DocBasicObjectsMutableIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocBasicObjectsMutableIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocBasicObjectsMutableIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocBasicObjectsMutableIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocBasicObjectsMutableIterator___ne__(self, rvalue)

# Register DocBasicObjectsMutableIterator in _pydocengine:
_pydocengine.DocBasicObjectsMutableIterator_swigregister(DocBasicObjectsMutableIterator)
class DocBasicObjectsSliceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocBasicObjectsSliceIterator_swiginit(self, _pydocengine.new_DocBasicObjectsSliceIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocBasicObjectsSliceIterator

    def GetID(self):
        return _pydocengine.DocBasicObjectsSliceIterator_GetID(self)

    def GetBasicObject(self):
        return _pydocengine.DocBasicObjectsSliceIterator_GetBasicObject(self)

    def GetTags(self):
        return _pydocengine.DocBasicObjectsSliceIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocBasicObjectsSliceIterator_Advance(self)

    def Finished(self):
        return _pydocengine.DocBasicObjectsSliceIterator_Finished(self)

# Register DocBasicObjectsSliceIterator in _pydocengine:
_pydocengine.DocBasicObjectsSliceIterator_swigregister(DocBasicObjectsSliceIterator)
class DocBasicObjectsMutableSliceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocBasicObjectsMutableSliceIterator_swiginit(self, _pydocengine.new_DocBasicObjectsMutableSliceIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocBasicObjectsMutableSliceIterator

    def GetID(self):
        return _pydocengine.DocBasicObjectsMutableSliceIterator_GetID(self)

    def GetBasicObject(self):
        return _pydocengine.DocBasicObjectsMutableSliceIterator_GetBasicObject(self)

    def GetMutableBasicObject(self):
        return _pydocengine.DocBasicObjectsMutableSliceIterator_GetMutableBasicObject(self)

    def GetTags(self):
        return _pydocengine.DocBasicObjectsMutableSliceIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocBasicObjectsMutableSliceIterator_Advance(self)

    def Finished(self):
        return _pydocengine.DocBasicObjectsMutableSliceIterator_Finished(self)

# Register DocBasicObjectsMutableSliceIterator in _pydocengine:
_pydocengine.DocBasicObjectsMutableSliceIterator_swigregister(DocBasicObjectsMutableSliceIterator)
class DocBasicObjectsCrossSliceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocBasicObjectsCrossSliceIterator_swiginit(self, _pydocengine.new_DocBasicObjectsCrossSliceIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocBasicObjectsCrossSliceIterator

    def GetCollectionID(self):
        return _pydocengine.DocBasicObjectsCrossSliceIterator_GetCollectionID(self)

    def GetObjectID(self):
        return _pydocengine.DocBasicObjectsCrossSliceIterator_GetObjectID(self)

    def GetBasicObject(self):
        return _pydocengine.DocBasicObjectsCrossSliceIterator_GetBasicObject(self)

    def GetTags(self):
        return _pydocengine.DocBasicObjectsCrossSliceIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocBasicObjectsCrossSliceIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocBasicObjectsCrossSliceIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocBasicObjectsCrossSliceIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocBasicObjectsCrossSliceIterator___ne__(self, rvalue)

# Register DocBasicObjectsCrossSliceIterator in _pydocengine:
_pydocengine.DocBasicObjectsCrossSliceIterator_swigregister(DocBasicObjectsCrossSliceIterator)
class DocBasicObjectsMutableCrossSliceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocBasicObjectsMutableCrossSliceIterator_swiginit(self, _pydocengine.new_DocBasicObjectsMutableCrossSliceIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocBasicObjectsMutableCrossSliceIterator

    def GetCollectionID(self):
        return _pydocengine.DocBasicObjectsMutableCrossSliceIterator_GetCollectionID(self)

    def GetObjectID(self):
        return _pydocengine.DocBasicObjectsMutableCrossSliceIterator_GetObjectID(self)

    def GetBasicObject(self):
        return _pydocengine.DocBasicObjectsMutableCrossSliceIterator_GetBasicObject(self)

    def GetMutableBasicObject(self):
        return _pydocengine.DocBasicObjectsMutableCrossSliceIterator_GetMutableBasicObject(self)

    def GetTags(self):
        return _pydocengine.DocBasicObjectsMutableCrossSliceIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocBasicObjectsMutableCrossSliceIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocBasicObjectsMutableCrossSliceIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocBasicObjectsMutableCrossSliceIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocBasicObjectsMutableCrossSliceIterator___ne__(self, rvalue)

# Register DocBasicObjectsMutableCrossSliceIterator in _pydocengine:
_pydocengine.DocBasicObjectsMutableCrossSliceIterator_swigregister(DocBasicObjectsMutableCrossSliceIterator)
class DocPhysicalPage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocPhysicalPage

    def GetSourceSceneID(self):
        return _pydocengine.DocPhysicalPage_GetSourceSceneID(self)

    def TextObjectsBegin(self, name):
        return _pydocengine.DocPhysicalPage_TextObjectsBegin(self, name)

    def TextObjectsEnd(self, name):
        return _pydocengine.DocPhysicalPage_TextObjectsEnd(self, name)

    def ImageObjectsBegin(self, name):
        return _pydocengine.DocPhysicalPage_ImageObjectsBegin(self, name)

    def ImageObjectsEnd(self, name):
        return _pydocengine.DocPhysicalPage_ImageObjectsEnd(self, name)

    def TableObjectsBegin(self, name):
        return _pydocengine.DocPhysicalPage_TableObjectsBegin(self, name)

    def TableObjectsEnd(self, name):
        return _pydocengine.DocPhysicalPage_TableObjectsEnd(self, name)

    def BarcodeObjectsBegin(self, name):
        return _pydocengine.DocPhysicalPage_BarcodeObjectsBegin(self, name)

    def BarcodeObjectsEnd(self, name):
        return _pydocengine.DocPhysicalPage_BarcodeObjectsEnd(self, name)

    def CheckboxObjectsBegin(self, name):
        return _pydocengine.DocPhysicalPage_CheckboxObjectsBegin(self, name)

    def CheckboxObjectsEnd(self, name):
        return _pydocengine.DocPhysicalPage_CheckboxObjectsEnd(self, name)

    def ForensicObjectsBegin(self, name):
        return _pydocengine.DocPhysicalPage_ForensicObjectsBegin(self, name)

    def ForensicObjectsEnd(self, name):
        return _pydocengine.DocPhysicalPage_ForensicObjectsEnd(self, name)

    def ForensicCheckObjectsBegin(self, name):
        return _pydocengine.DocPhysicalPage_ForensicCheckObjectsBegin(self, name)

    def ForensicCheckObjectsEnd(self, name):
        return _pydocengine.DocPhysicalPage_ForensicCheckObjectsEnd(self, name)

    def GetTextObjectsCount(self, name):
        return _pydocengine.DocPhysicalPage_GetTextObjectsCount(self, name)

    def GetImageObjectsCount(self, name):
        return _pydocengine.DocPhysicalPage_GetImageObjectsCount(self, name)

    def GetTableObjectsCount(self, name):
        return _pydocengine.DocPhysicalPage_GetTableObjectsCount(self, name)

    def GetBarcodeObjectsCount(self, name):
        return _pydocengine.DocPhysicalPage_GetBarcodeObjectsCount(self, name)

    def GetCheckboxObjectsCount(self, name):
        return _pydocengine.DocPhysicalPage_GetCheckboxObjectsCount(self, name)

    def GetForensicObjectsCount(self, name):
        return _pydocengine.DocPhysicalPage_GetForensicObjectsCount(self, name)

    def GetForensicCheckObjectsCount(self, name):
        return _pydocengine.DocPhysicalPage_GetForensicCheckObjectsCount(self, name)

    def HasBasicObjects(self):
        return _pydocengine.DocPhysicalPage_HasBasicObjects(self)

    def GetPageQuadrangle(self):
        return _pydocengine.DocPhysicalPage_GetPageQuadrangle(self)

    def GetPagePolygon(self):
        return _pydocengine.DocPhysicalPage_GetPagePolygon(self)

    def GetFulltextBasicObjectsBegin(self):
        return _pydocengine.DocPhysicalPage_GetFulltextBasicObjectsBegin(self)

    def GetFulltextBasicObjectsEnd(self):
        return _pydocengine.DocPhysicalPage_GetFulltextBasicObjectsEnd(self)

    def GetPageImageFromScene(self, scene_image):
        return _pydocengine.DocPhysicalPage_GetPageImageFromScene(self, scene_image)

    def BasicObjectsBegin(self, name):
        return _pydocengine.DocPhysicalPage_BasicObjectsBegin(self, name)

    def BasicObjectsEnd(self, name):
        return _pydocengine.DocPhysicalPage_BasicObjectsEnd(self, name)

    def GetBasicObjectsCount(self, name):
        return _pydocengine.DocPhysicalPage_GetBasicObjectsCount(self, name)

# Register DocPhysicalPage in _pydocengine:
_pydocengine.DocPhysicalPage_swigregister(DocPhysicalPage)
class DocPhysicalDocument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocPhysicalDocument

    def GetTextObjectsCount(self, name):
        return _pydocengine.DocPhysicalDocument_GetTextObjectsCount(self, name)

    def GetTableObjectsCount(self, name):
        return _pydocengine.DocPhysicalDocument_GetTableObjectsCount(self, name)

    def GetImageObjectsCount(self, name):
        return _pydocengine.DocPhysicalDocument_GetImageObjectsCount(self, name)

    def GetForensicObjectsCount(self, name):
        return _pydocengine.DocPhysicalDocument_GetForensicObjectsCount(self, name)

    def GetForensicCheckObjectsCount(self, name):
        return _pydocengine.DocPhysicalDocument_GetForensicCheckObjectsCount(self, name)

    def GetBarcodeObjectsCount(self, name):
        return _pydocengine.DocPhysicalDocument_GetBarcodeObjectsCount(self, name)

    def GetCheckboxObjectsCount(self, name):
        return _pydocengine.DocPhysicalDocument_GetCheckboxObjectsCount(self, name)

    def GetPagesCount(self):
        return _pydocengine.DocPhysicalDocument_GetPagesCount(self)

    def GetPhysicalPage(self, idx):
        return _pydocengine.DocPhysicalDocument_GetPhysicalPage(self, idx)

    def GetPhysicalPagePtr(self, idx):
        return _pydocengine.DocPhysicalDocument_GetPhysicalPagePtr(self, idx)

    def GetBasicObjectsCount(self, name):
        return _pydocengine.DocPhysicalDocument_GetBasicObjectsCount(self, name)

# Register DocPhysicalDocument in _pydocengine:
_pydocengine.DocPhysicalDocument_swigregister(DocPhysicalDocument)
class DocView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def BaseClassNameStatic():
        return _pydocengine.DocView_BaseClassNameStatic()
    __swig_destroy__ = _pydocengine.delete_DocView

    def GetImage(self):
        return _pydocengine.DocView_GetImage(self)

    def GetMutableImage(self):
        return _pydocengine.DocView_GetMutableImage(self)

    def SetImage(self, image):
        return _pydocengine.DocView_SetImage(self, image)

    def GetAncestorID(self):
        return _pydocengine.DocView_GetAncestorID(self)

    def SetAncestorID(self, anc_id):
        return _pydocengine.DocView_SetAncestorID(self, anc_id)

    def GetRootAncestorID(self):
        return _pydocengine.DocView_GetRootAncestorID(self)

    def SetRootAncestorID(self, root_anc_id):
        return _pydocengine.DocView_SetRootAncestorID(self, root_anc_id)

    def GetTransform(self):
        return _pydocengine.DocView_GetTransform(self)

    def GetMutableTransform(self):
        return _pydocengine.DocView_GetMutableTransform(self)

    def SetTransform(self, transform):
        return _pydocengine.DocView_SetTransform(self, transform)

    def Serialize(self, serializer):
        return _pydocengine.DocView_Serialize(self, serializer)

# Register DocView in _pydocengine:
_pydocengine.DocView_swigregister(DocView)
class DocViewsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocViewsIterator_swiginit(self, _pydocengine.new_DocViewsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocViewsIterator

    def GetID(self):
        return _pydocengine.DocViewsIterator_GetID(self)

    def GetView(self):
        return _pydocengine.DocViewsIterator_GetView(self)

    def GetTags(self):
        return _pydocengine.DocViewsIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocViewsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocViewsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocViewsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocViewsIterator___ne__(self, rvalue)

# Register DocViewsIterator in _pydocengine:
_pydocengine.DocViewsIterator_swigregister(DocViewsIterator)
class DocViewsMutableIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocViewsMutableIterator_swiginit(self, _pydocengine.new_DocViewsMutableIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocViewsMutableIterator

    def GetID(self):
        return _pydocengine.DocViewsMutableIterator_GetID(self)

    def GetView(self):
        return _pydocengine.DocViewsMutableIterator_GetView(self)

    def GetMutableView(self):
        return _pydocengine.DocViewsMutableIterator_GetMutableView(self)

    def GetTags(self):
        return _pydocengine.DocViewsMutableIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocViewsMutableIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocViewsMutableIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocViewsMutableIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocViewsMutableIterator___ne__(self, rvalue)

# Register DocViewsMutableIterator in _pydocengine:
_pydocengine.DocViewsMutableIterator_swigregister(DocViewsMutableIterator)
class DocViewsSliceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocViewsSliceIterator_swiginit(self, _pydocengine.new_DocViewsSliceIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocViewsSliceIterator

    def GetID(self):
        return _pydocengine.DocViewsSliceIterator_GetID(self)

    def GetView(self):
        return _pydocengine.DocViewsSliceIterator_GetView(self)

    def GetTags(self):
        return _pydocengine.DocViewsSliceIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocViewsSliceIterator_Advance(self)

    def Finished(self):
        return _pydocengine.DocViewsSliceIterator_Finished(self)

# Register DocViewsSliceIterator in _pydocengine:
_pydocengine.DocViewsSliceIterator_swigregister(DocViewsSliceIterator)
class DocViewsMutableSliceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocViewsMutableSliceIterator_swiginit(self, _pydocengine.new_DocViewsMutableSliceIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocViewsMutableSliceIterator

    def GetID(self):
        return _pydocengine.DocViewsMutableSliceIterator_GetID(self)

    def GetView(self):
        return _pydocengine.DocViewsMutableSliceIterator_GetView(self)

    def GetMutableView(self):
        return _pydocengine.DocViewsMutableSliceIterator_GetMutableView(self)

    def GetTags(self):
        return _pydocengine.DocViewsMutableSliceIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocViewsMutableSliceIterator_Advance(self)

    def Finished(self):
        return _pydocengine.DocViewsMutableSliceIterator_Finished(self)

# Register DocViewsMutableSliceIterator in _pydocengine:
_pydocengine.DocViewsMutableSliceIterator_swigregister(DocViewsMutableSliceIterator)
class DocViewsCollection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def BaseClassNameStatic():
        return _pydocengine.DocViewsCollection_BaseClassNameStatic()
    __swig_destroy__ = _pydocengine.delete_DocViewsCollection

    def GetViewsCount(self):
        return _pydocengine.DocViewsCollection_GetViewsCount(self)

    def HasView(self, view_id):
        return _pydocengine.DocViewsCollection_HasView(self, view_id)

    def GetView(self, view_id):
        return _pydocengine.DocViewsCollection_GetView(self, view_id)

    def GetMutableView(self, view_id):
        return _pydocengine.DocViewsCollection_GetMutableView(self, view_id)

    def GetViewTags(self, view_id):
        return _pydocengine.DocViewsCollection_GetViewTags(self, view_id)

    def RegisterView(self, image):
        return _pydocengine.DocViewsCollection_RegisterView(self, image)

    def RegisterDerivedView(self, image, ancestor_id, transform):
        return _pydocengine.DocViewsCollection_RegisterDerivedView(self, image, ancestor_id, transform)

    def DeleteOrphans(self):
        return _pydocengine.DocViewsCollection_DeleteOrphans(self)

    def DeleteView(self, view_id):
        return _pydocengine.DocViewsCollection_DeleteView(self, view_id)

    def ViewsBegin(self):
        return _pydocengine.DocViewsCollection_ViewsBegin(self)

    def ViewsEnd(self):
        return _pydocengine.DocViewsCollection_ViewsEnd(self)

    def MutableViewsBegin(self):
        return _pydocengine.DocViewsCollection_MutableViewsBegin(self)

    def MutableViewsEnd(self):
        return _pydocengine.DocViewsCollection_MutableViewsEnd(self)

    def ViewsSlice(self, tag):
        return _pydocengine.DocViewsCollection_ViewsSlice(self, tag)

    def MutableViewsSlice(self, tag):
        return _pydocengine.DocViewsCollection_MutableViewsSlice(self, tag)

    def Serialize(self, serializer):
        return _pydocengine.DocViewsCollection_Serialize(self, serializer)

# Register DocViewsCollection in _pydocengine:
_pydocengine.DocViewsCollection_swigregister(DocViewsCollection)
class DocObjectsCollection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def BaseClassNameStatic():
        return _pydocengine.DocObjectsCollection_BaseClassNameStatic()

    @staticmethod
    def Create(object_type):
        return _pydocengine.DocObjectsCollection_Create(object_type)

    def CreateObject(self):
        return _pydocengine.DocObjectsCollection_CreateObject(self)
    __swig_destroy__ = _pydocengine.delete_DocObjectsCollection

    def Clone(self):
        return _pydocengine.DocObjectsCollection_Clone(self)

    def ObjectType(self):
        return _pydocengine.DocObjectsCollection_ObjectType(self)

    def GetFrameID(self):
        return _pydocengine.DocObjectsCollection_GetFrameID(self)

    def SetFrameID(self, frame_id):
        return _pydocengine.DocObjectsCollection_SetFrameID(self, frame_id)

    def GetObjectsCount(self):
        return _pydocengine.DocObjectsCollection_GetObjectsCount(self)

    def HasObject(self, obj_id):
        return _pydocengine.DocObjectsCollection_HasObject(self, obj_id)

    def GetObject(self, obj_id):
        return _pydocengine.DocObjectsCollection_GetObject(self, obj_id)

    def GetMutableObject(self, obj_id):
        return _pydocengine.DocObjectsCollection_GetMutableObject(self, obj_id)

    def GetObjectTags(self, obj_id):
        return _pydocengine.DocObjectsCollection_GetObjectTags(self, obj_id)

    def AddObject(self, obj):
        return _pydocengine.DocObjectsCollection_AddObject(self, obj)

    def SetObject(self, obj_id, obj):
        return _pydocengine.DocObjectsCollection_SetObject(self, obj_id, obj)

    def RemoveObject(self, obj_id):
        return _pydocengine.DocObjectsCollection_RemoveObject(self, obj_id)

    def RemoveObjectDeep(self, obj_id, views_collection):
        return _pydocengine.DocObjectsCollection_RemoveObjectDeep(self, obj_id, views_collection)

    def BasicObjectsBegin(self):
        return _pydocengine.DocObjectsCollection_BasicObjectsBegin(self)

    def BasicObjectsEnd(self):
        return _pydocengine.DocObjectsCollection_BasicObjectsEnd(self)

    def MutableBasicObjectsBegin(self):
        return _pydocengine.DocObjectsCollection_MutableBasicObjectsBegin(self)

    def MutableBasicObjectsEnd(self):
        return _pydocengine.DocObjectsCollection_MutableBasicObjectsEnd(self)

    def BasicObjectsSlice(self, tag):
        return _pydocengine.DocObjectsCollection_BasicObjectsSlice(self, tag)

    def MutableBasicObjectsSlice(self, tag):
        return _pydocengine.DocObjectsCollection_MutableBasicObjectsSlice(self, tag)

    def Serialize(self, serializer):
        return _pydocengine.DocObjectsCollection_Serialize(self, serializer)

# Register DocObjectsCollection in _pydocengine:
_pydocengine.DocObjectsCollection_swigregister(DocObjectsCollection)
class DocObjectsCollectionsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocObjectsCollectionsIterator_swiginit(self, _pydocengine.new_DocObjectsCollectionsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocObjectsCollectionsIterator

    def GetID(self):
        return _pydocengine.DocObjectsCollectionsIterator_GetID(self)

    def GetObjectsCollection(self):
        return _pydocengine.DocObjectsCollectionsIterator_GetObjectsCollection(self)

    def GetTags(self):
        return _pydocengine.DocObjectsCollectionsIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocObjectsCollectionsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocObjectsCollectionsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocObjectsCollectionsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocObjectsCollectionsIterator___ne__(self, rvalue)

# Register DocObjectsCollectionsIterator in _pydocengine:
_pydocengine.DocObjectsCollectionsIterator_swigregister(DocObjectsCollectionsIterator)
class DocObjectsCollectionsMutableIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocObjectsCollectionsMutableIterator_swiginit(self, _pydocengine.new_DocObjectsCollectionsMutableIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocObjectsCollectionsMutableIterator

    def GetID(self):
        return _pydocengine.DocObjectsCollectionsMutableIterator_GetID(self)

    def GetObjectsCollection(self):
        return _pydocengine.DocObjectsCollectionsMutableIterator_GetObjectsCollection(self)

    def GetMutableObjectsCollection(self):
        return _pydocengine.DocObjectsCollectionsMutableIterator_GetMutableObjectsCollection(self)

    def GetTags(self):
        return _pydocengine.DocObjectsCollectionsMutableIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocObjectsCollectionsMutableIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocObjectsCollectionsMutableIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocObjectsCollectionsMutableIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocObjectsCollectionsMutableIterator___ne__(self, rvalue)

# Register DocObjectsCollectionsMutableIterator in _pydocengine:
_pydocengine.DocObjectsCollectionsMutableIterator_swigregister(DocObjectsCollectionsMutableIterator)
class DocObjectsCollectionsSliceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocObjectsCollectionsSliceIterator_swiginit(self, _pydocengine.new_DocObjectsCollectionsSliceIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocObjectsCollectionsSliceIterator

    def GetID(self):
        return _pydocengine.DocObjectsCollectionsSliceIterator_GetID(self)

    def GetObjectsCollection(self):
        return _pydocengine.DocObjectsCollectionsSliceIterator_GetObjectsCollection(self)

    def GetTags(self):
        return _pydocengine.DocObjectsCollectionsSliceIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocObjectsCollectionsSliceIterator_Advance(self)

    def Finished(self):
        return _pydocengine.DocObjectsCollectionsSliceIterator_Finished(self)

# Register DocObjectsCollectionsSliceIterator in _pydocengine:
_pydocengine.DocObjectsCollectionsSliceIterator_swigregister(DocObjectsCollectionsSliceIterator)
class DocObjectsCollectionsMutableSliceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocObjectsCollectionsMutableSliceIterator_swiginit(self, _pydocengine.new_DocObjectsCollectionsMutableSliceIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocObjectsCollectionsMutableSliceIterator

    def GetID(self):
        return _pydocengine.DocObjectsCollectionsMutableSliceIterator_GetID(self)

    def GetObjectsCollection(self):
        return _pydocengine.DocObjectsCollectionsMutableSliceIterator_GetObjectsCollection(self)

    def GetMutableObjectsCollection(self):
        return _pydocengine.DocObjectsCollectionsMutableSliceIterator_GetMutableObjectsCollection(self)

    def GetTags(self):
        return _pydocengine.DocObjectsCollectionsMutableSliceIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocObjectsCollectionsMutableSliceIterator_Advance(self)

    def Finished(self):
        return _pydocengine.DocObjectsCollectionsMutableSliceIterator_Finished(self)

# Register DocObjectsCollectionsMutableSliceIterator in _pydocengine:
_pydocengine.DocObjectsCollectionsMutableSliceIterator_swigregister(DocObjectsCollectionsMutableSliceIterator)
class DocGraphicalStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocGraphicalStructure

    def GetCollectionsCount(self):
        return _pydocengine.DocGraphicalStructure_GetCollectionsCount(self)

    def HasCollection(self, c_id):
        return _pydocengine.DocGraphicalStructure_HasCollection(self, c_id)

    def GetCollection(self, c_id):
        return _pydocengine.DocGraphicalStructure_GetCollection(self, c_id)

    def GetMutableCollection(self, c_id):
        return _pydocengine.DocGraphicalStructure_GetMutableCollection(self, c_id)

    def GetCollectionTags(self, c_id):
        return _pydocengine.DocGraphicalStructure_GetCollectionTags(self, c_id)

    def AddCollection(self, *args):
        return _pydocengine.DocGraphicalStructure_AddCollection(self, *args)

    def SetCollection(self, c_id, collection):
        return _pydocengine.DocGraphicalStructure_SetCollection(self, c_id, collection)

    def RemoveCollection(self, c_id):
        return _pydocengine.DocGraphicalStructure_RemoveCollection(self, c_id)

    def ObjectsCollectionsBegin(self):
        return _pydocengine.DocGraphicalStructure_ObjectsCollectionsBegin(self)

    def ObjectsCollectionsEnd(self):
        return _pydocengine.DocGraphicalStructure_ObjectsCollectionsEnd(self)

    def MutableObjectsCollectionsBegin(self):
        return _pydocengine.DocGraphicalStructure_MutableObjectsCollectionsBegin(self)

    def MutableObjectsCollectionsEnd(self):
        return _pydocengine.DocGraphicalStructure_MutableObjectsCollectionsEnd(self)

    def ObjectsCollectionsSlice(self, tag):
        return _pydocengine.DocGraphicalStructure_ObjectsCollectionsSlice(self, tag)

    def MutableObjectsCollectionsSlice(self, tag):
        return _pydocengine.DocGraphicalStructure_MutableObjectsCollectionsSlice(self, tag)

    def GetViewsCollection(self):
        return _pydocengine.DocGraphicalStructure_GetViewsCollection(self)

    def GetMutableViewsCollection(self):
        return _pydocengine.DocGraphicalStructure_GetMutableViewsCollection(self)

    def Serialize(self, serializer):
        return _pydocengine.DocGraphicalStructure_Serialize(self, serializer)

# Register DocGraphicalStructure in _pydocengine:
_pydocengine.DocGraphicalStructure_swigregister(DocGraphicalStructure)
class DocBaseFieldInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocBaseFieldInfo

    def GetName(self):
        return _pydocengine.DocBaseFieldInfo_GetName(self)

    def SetName(self, name):
        return _pydocengine.DocBaseFieldInfo_SetName(self, name)

    def GetConfidence(self):
        return _pydocengine.DocBaseFieldInfo_GetConfidence(self)

    def SetConfidence(self, conf):
        return _pydocengine.DocBaseFieldInfo_SetConfidence(self, conf)

    def GetAcceptFlag(self):
        return _pydocengine.DocBaseFieldInfo_GetAcceptFlag(self)

    def SetAcceptFlag(self, is_accepted):
        return _pydocengine.DocBaseFieldInfo_SetAcceptFlag(self, is_accepted)

    def GetAttributesCount(self):
        return _pydocengine.DocBaseFieldInfo_GetAttributesCount(self)

    def HasAttribute(self, attr_name):
        return _pydocengine.DocBaseFieldInfo_HasAttribute(self, attr_name)

    def GetAttribute(self, attr_name):
        return _pydocengine.DocBaseFieldInfo_GetAttribute(self, attr_name)

    def SetAttribute(self, attr_name, attr_value):
        return _pydocengine.DocBaseFieldInfo_SetAttribute(self, attr_name, attr_value)

    def RemoveAttribute(self, attr_name):
        return _pydocengine.DocBaseFieldInfo_RemoveAttribute(self, attr_name)

    def AttributesBegin(self):
        return _pydocengine.DocBaseFieldInfo_AttributesBegin(self)

    def AttributesEnd(self):
        return _pydocengine.DocBaseFieldInfo_AttributesEnd(self)

    def ConnectedTextObjectsBegin(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedTextObjectsBegin(self, phys_doc)

    def ConnectedTextObjectsEnd(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedTextObjectsEnd(self, phys_doc)

    def ConnectedTableObjectsBegin(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedTableObjectsBegin(self, phys_doc)

    def ConnectedTableObjectsEnd(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedTableObjectsEnd(self, phys_doc)

    def ConnectedImageObjectsBegin(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedImageObjectsBegin(self, phys_doc)

    def ConnectedImageObjectsEnd(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedImageObjectsEnd(self, phys_doc)

    def ConnectedCheckboxObjectsBegin(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedCheckboxObjectsBegin(self, phys_doc)

    def ConnectedCheckboxObjectsEnd(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedCheckboxObjectsEnd(self, phys_doc)

    def ConnectedForensicCheckObjectsBegin(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedForensicCheckObjectsBegin(self, phys_doc)

    def ConnectedForensicCheckObjectsEnd(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedForensicCheckObjectsEnd(self, phys_doc)

    def ConnectedForensicObjectsBegin(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedForensicObjectsBegin(self, phys_doc)

    def ConnectedForensicObjectsEnd(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedForensicObjectsEnd(self, phys_doc)

    def ConnectedBarcodeObjectsBegin(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedBarcodeObjectsBegin(self, phys_doc)

    def ConnectedBarcodeObjectsEnd(self, phys_doc):
        return _pydocengine.DocBaseFieldInfo_ConnectedBarcodeObjectsEnd(self, phys_doc)

    def Serialize(self, serializer):
        return _pydocengine.DocBaseFieldInfo_Serialize(self, serializer)

    def ConnectedBasicObjectsBegin(self, graphical):
        return _pydocengine.DocBaseFieldInfo_ConnectedBasicObjectsBegin(self, graphical)

    def ConnectedBasicObjectsEnd(self, graphical):
        return _pydocengine.DocBaseFieldInfo_ConnectedBasicObjectsEnd(self, graphical)

    def MutableConnectedBasicObjectsBegin(self, graphical):
        return _pydocengine.DocBaseFieldInfo_MutableConnectedBasicObjectsBegin(self, graphical)

    def MutableConnectedBasicObjectsEnd(self, graphical):
        return _pydocengine.DocBaseFieldInfo_MutableConnectedBasicObjectsEnd(self, graphical)

    def ConnectBasicObject(self, coll_id, obj_id):
        return _pydocengine.DocBaseFieldInfo_ConnectBasicObject(self, coll_id, obj_id)

# Register DocBaseFieldInfo in _pydocengine:
_pydocengine.DocBaseFieldInfo_swigregister(DocBaseFieldInfo)
class DocTextField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocTextField

    def GetBaseFieldInfo(self):
        return _pydocengine.DocTextField_GetBaseFieldInfo(self)

    def GetMutableBaseFieldInfo(self):
        return _pydocengine.DocTextField_GetMutableBaseFieldInfo(self)

    def GetOcrString(self):
        return _pydocengine.DocTextField_GetOcrString(self)

    def GetMutableOcrString(self):
        return _pydocengine.DocTextField_GetMutableOcrString(self)

    def SetOcrString(self, ocrstring):
        return _pydocengine.DocTextField_SetOcrString(self, ocrstring)

    def Serialize(self, serializer):
        return _pydocengine.DocTextField_Serialize(self, serializer)

# Register DocTextField in _pydocengine:
_pydocengine.DocTextField_swigregister(DocTextField)
class DocImageField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocImageField

    def GetBaseFieldInfo(self):
        return _pydocengine.DocImageField_GetBaseFieldInfo(self)

    def GetMutableBaseFieldInfo(self):
        return _pydocengine.DocImageField_GetMutableBaseFieldInfo(self)

    def GetImage(self):
        return _pydocengine.DocImageField_GetImage(self)

    def GetMutableImage(self):
        return _pydocengine.DocImageField_GetMutableImage(self)

    def SetImage(self, image):
        return _pydocengine.DocImageField_SetImage(self, image)

    def Serialize(self, serializer):
        return _pydocengine.DocImageField_Serialize(self, serializer)

# Register DocImageField in _pydocengine:
_pydocengine.DocImageField_swigregister(DocImageField)
class DocCheckboxField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocCheckboxField

    def GetBaseFieldInfo(self):
        return _pydocengine.DocCheckboxField_GetBaseFieldInfo(self)

    def GetMutableBaseFieldInfo(self):
        return _pydocengine.DocCheckboxField_GetMutableBaseFieldInfo(self)

    def GetTickStatus(self):
        return _pydocengine.DocCheckboxField_GetTickStatus(self)

    def SetTickStatus(self, tick_status):
        return _pydocengine.DocCheckboxField_SetTickStatus(self, tick_status)

    def Serialize(self, serializer):
        return _pydocengine.DocCheckboxField_Serialize(self, serializer)

# Register DocCheckboxField in _pydocengine:
_pydocengine.DocCheckboxField_swigregister(DocCheckboxField)
class DocForensicField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocForensicField

    def GetBaseFieldInfo(self):
        return _pydocengine.DocForensicField_GetBaseFieldInfo(self)

    def GetMutableBaseFieldInfo(self):
        return _pydocengine.DocForensicField_GetMutableBaseFieldInfo(self)

    def GetStatus(self):
        return _pydocengine.DocForensicField_GetStatus(self)

    def SetStatus(self, status):
        return _pydocengine.DocForensicField_SetStatus(self, status)

    def Serialize(self, serializer):
        return _pydocengine.DocForensicField_Serialize(self, serializer)

# Register DocForensicField in _pydocengine:
_pydocengine.DocForensicField_swigregister(DocForensicField)
class DocForensicCheckField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocForensicCheckField

    def GetBaseFieldInfo(self):
        return _pydocengine.DocForensicCheckField_GetBaseFieldInfo(self)

    def GetMutableBaseFieldInfo(self):
        return _pydocengine.DocForensicCheckField_GetMutableBaseFieldInfo(self)

    def GetStatus(self):
        return _pydocengine.DocForensicCheckField_GetStatus(self)

    def SetStatus(self, status):
        return _pydocengine.DocForensicCheckField_SetStatus(self, status)

    def GetAttributesCount(self):
        return _pydocengine.DocForensicCheckField_GetAttributesCount(self)

    def AttributesBegin(self):
        return _pydocengine.DocForensicCheckField_AttributesBegin(self)

    def AttributesEnd(self):
        return _pydocengine.DocForensicCheckField_AttributesEnd(self)

    def Serialize(self, serializer):
        return _pydocengine.DocForensicCheckField_Serialize(self, serializer)

# Register DocForensicCheckField in _pydocengine:
_pydocengine.DocForensicCheckField_swigregister(DocForensicCheckField)
class DocTableField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocTableField

    def GetBaseFieldInfo(self):
        return _pydocengine.DocTableField_GetBaseFieldInfo(self)

    def GetMutableBaseFieldInfo(self):
        return _pydocengine.DocTableField_GetMutableBaseFieldInfo(self)

    def GetRowsCount(self):
        return _pydocengine.DocTableField_GetRowsCount(self)

    def GetColsCount(self):
        return _pydocengine.DocTableField_GetColsCount(self)

    def GetCell(self, row, col):
        return _pydocengine.DocTableField_GetCell(self, row, col)

    def GetMutableCell(self, row, col):
        return _pydocengine.DocTableField_GetMutableCell(self, row, col)

    def SetCell(self, row, col, text_field):
        return _pydocengine.DocTableField_SetCell(self, row, col, text_field)

    def ResizeRows(self, *args):
        return _pydocengine.DocTableField_ResizeRows(self, *args)

    def ResizeCols(self, *args):
        return _pydocengine.DocTableField_ResizeCols(self, *args)

    def GetColName(self, col):
        return _pydocengine.DocTableField_GetColName(self, col)

    def SetColName(self, col, col_name):
        return _pydocengine.DocTableField_SetColName(self, col, col_name)

    def Serialize(self, serializer):
        return _pydocengine.DocTableField_Serialize(self, serializer)

# Register DocTableField in _pydocengine:
_pydocengine.DocTableField_swigregister(DocTableField)
class DocBarcodeField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocBarcodeField

    def GetBaseFieldInfo(self):
        return _pydocengine.DocBarcodeField_GetBaseFieldInfo(self)

    def GetMutableBaseFieldInfo(self):
        return _pydocengine.DocBarcodeField_GetMutableBaseFieldInfo(self)

    def GetDecodedString(self):
        return _pydocengine.DocBarcodeField_GetDecodedString(self)

    def GetMutableDecodedString(self):
        return _pydocengine.DocBarcodeField_GetMutableDecodedString(self)

    def SetDecodedString(self, decstring):
        return _pydocengine.DocBarcodeField_SetDecodedString(self, decstring)

    def Serialize(self, serializer):
        return _pydocengine.DocBarcodeField_Serialize(self, serializer)

# Register DocBarcodeField in _pydocengine:
_pydocengine.DocBarcodeField_swigregister(DocBarcodeField)
class DocTextFieldsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocTextFieldsIterator_swiginit(self, _pydocengine.new_DocTextFieldsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocTextFieldsIterator

    def GetKey(self):
        return _pydocengine.DocTextFieldsIterator_GetKey(self)

    def GetField(self):
        return _pydocengine.DocTextFieldsIterator_GetField(self)

    def Advance(self):
        return _pydocengine.DocTextFieldsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocTextFieldsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocTextFieldsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocTextFieldsIterator___ne__(self, rvalue)

# Register DocTextFieldsIterator in _pydocengine:
_pydocengine.DocTextFieldsIterator_swigregister(DocTextFieldsIterator)
class DocImageFieldsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocImageFieldsIterator_swiginit(self, _pydocengine.new_DocImageFieldsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocImageFieldsIterator

    def GetKey(self):
        return _pydocengine.DocImageFieldsIterator_GetKey(self)

    def GetField(self):
        return _pydocengine.DocImageFieldsIterator_GetField(self)

    def Advance(self):
        return _pydocengine.DocImageFieldsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocImageFieldsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocImageFieldsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocImageFieldsIterator___ne__(self, rvalue)

# Register DocImageFieldsIterator in _pydocengine:
_pydocengine.DocImageFieldsIterator_swigregister(DocImageFieldsIterator)
class DocCheckboxFieldsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocCheckboxFieldsIterator_swiginit(self, _pydocengine.new_DocCheckboxFieldsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocCheckboxFieldsIterator

    def GetKey(self):
        return _pydocengine.DocCheckboxFieldsIterator_GetKey(self)

    def GetField(self):
        return _pydocengine.DocCheckboxFieldsIterator_GetField(self)

    def Advance(self):
        return _pydocengine.DocCheckboxFieldsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocCheckboxFieldsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocCheckboxFieldsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocCheckboxFieldsIterator___ne__(self, rvalue)

# Register DocCheckboxFieldsIterator in _pydocengine:
_pydocengine.DocCheckboxFieldsIterator_swigregister(DocCheckboxFieldsIterator)
class DocForensicFieldsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocForensicFieldsIterator_swiginit(self, _pydocengine.new_DocForensicFieldsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocForensicFieldsIterator

    def GetKey(self):
        return _pydocengine.DocForensicFieldsIterator_GetKey(self)

    def GetField(self):
        return _pydocengine.DocForensicFieldsIterator_GetField(self)

    def Advance(self):
        return _pydocengine.DocForensicFieldsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocForensicFieldsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocForensicFieldsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocForensicFieldsIterator___ne__(self, rvalue)

# Register DocForensicFieldsIterator in _pydocengine:
_pydocengine.DocForensicFieldsIterator_swigregister(DocForensicFieldsIterator)
class DocForensicCheckFieldsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocForensicCheckFieldsIterator_swiginit(self, _pydocengine.new_DocForensicCheckFieldsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocForensicCheckFieldsIterator

    def GetKey(self):
        return _pydocengine.DocForensicCheckFieldsIterator_GetKey(self)

    def GetField(self):
        return _pydocengine.DocForensicCheckFieldsIterator_GetField(self)

    def Advance(self):
        return _pydocengine.DocForensicCheckFieldsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocForensicCheckFieldsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocForensicCheckFieldsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocForensicCheckFieldsIterator___ne__(self, rvalue)

# Register DocForensicCheckFieldsIterator in _pydocengine:
_pydocengine.DocForensicCheckFieldsIterator_swigregister(DocForensicCheckFieldsIterator)
class DocTableFieldsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocTableFieldsIterator_swiginit(self, _pydocengine.new_DocTableFieldsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocTableFieldsIterator

    def GetKey(self):
        return _pydocengine.DocTableFieldsIterator_GetKey(self)

    def GetField(self):
        return _pydocengine.DocTableFieldsIterator_GetField(self)

    def Advance(self):
        return _pydocengine.DocTableFieldsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocTableFieldsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocTableFieldsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocTableFieldsIterator___ne__(self, rvalue)

# Register DocTableFieldsIterator in _pydocengine:
_pydocengine.DocTableFieldsIterator_swigregister(DocTableFieldsIterator)
class DocBarcodeFieldsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocBarcodeFieldsIterator_swiginit(self, _pydocengine.new_DocBarcodeFieldsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocBarcodeFieldsIterator

    def GetKey(self):
        return _pydocengine.DocBarcodeFieldsIterator_GetKey(self)

    def GetField(self):
        return _pydocengine.DocBarcodeFieldsIterator_GetField(self)

    def Advance(self):
        return _pydocengine.DocBarcodeFieldsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocBarcodeFieldsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocBarcodeFieldsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocBarcodeFieldsIterator___ne__(self, rvalue)

# Register DocBarcodeFieldsIterator in _pydocengine:
_pydocengine.DocBarcodeFieldsIterator_swigregister(DocBarcodeFieldsIterator)
class DocRawFieldFeedback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocRawFieldFeedback

    def GetName(self):
        return _pydocengine.DocRawFieldFeedback_GetName(self)

    def HasQuadrangle(self):
        return _pydocengine.DocRawFieldFeedback_HasQuadrangle(self)

    def GetQuadrangle(self):
        return _pydocengine.DocRawFieldFeedback_GetQuadrangle(self)

    def GetType(self):
        return _pydocengine.DocRawFieldFeedback_GetType(self)

    def GetOcrString(self):
        return _pydocengine.DocRawFieldFeedback_GetOcrString(self)

# Register DocRawFieldFeedback in _pydocengine:
_pydocengine.DocRawFieldFeedback_swigregister(DocRawFieldFeedback)
class DocRawFieldsFeedbackContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocRawFieldsFeedbackContainer

    def GetRawFieldCount(self):
        return _pydocengine.DocRawFieldsFeedbackContainer_GetRawFieldCount(self)

    def GetSourcePageID(self):
        return _pydocengine.DocRawFieldsFeedbackContainer_GetSourcePageID(self)

    def GetRawFieldFeedback(self, idx):
        return _pydocengine.DocRawFieldsFeedbackContainer_GetRawFieldFeedback(self, idx)

# Register DocRawFieldsFeedbackContainer in _pydocengine:
_pydocengine.DocRawFieldsFeedbackContainer_swigregister(DocRawFieldsFeedbackContainer)
class DocPageFeedback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocPageFeedback

    def GetQuadrangle(self):
        return _pydocengine.DocPageFeedback_GetQuadrangle(self)

    def GetID(self):
        return _pydocengine.DocPageFeedback_GetID(self)

    def GetType(self):
        return _pydocengine.DocPageFeedback_GetType(self)

    def IsPageRejected(self):
        return _pydocengine.DocPageFeedback_IsPageRejected(self)

# Register DocPageFeedback in _pydocengine:
_pydocengine.DocPageFeedback_swigregister(DocPageFeedback)
class DocPagesFeedbackContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocPagesFeedbackContainer

    def GetPageCount(self):
        return _pydocengine.DocPagesFeedbackContainer_GetPageCount(self)

    def GetPageFeedback(self, idx):
        return _pydocengine.DocPagesFeedbackContainer_GetPageFeedback(self, idx)

# Register DocPagesFeedbackContainer in _pydocengine:
_pydocengine.DocPagesFeedbackContainer_swigregister(DocPagesFeedbackContainer)
class DocFeedbackContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocFeedbackContainer

    def FeedbackFieldIteratorBegin(self):
        return _pydocengine.DocFeedbackContainer_FeedbackFieldIteratorBegin(self)

    def FeedbackFieldIteratorEnd(self):
        return _pydocengine.DocFeedbackContainer_FeedbackFieldIteratorEnd(self)

    def FeedbackQuadIteratorBegin(self):
        return _pydocengine.DocFeedbackContainer_FeedbackQuadIteratorBegin(self)

    def FeedbackQuadIteratorEnd(self):
        return _pydocengine.DocFeedbackContainer_FeedbackQuadIteratorEnd(self)

    def SetFeedbackField(self, key, field):
        return _pydocengine.DocFeedbackContainer_SetFeedbackField(self, key, field)

    def SetFeedbackQuad(self, key, quad):
        return _pydocengine.DocFeedbackContainer_SetFeedbackQuad(self, key, quad)

# Register DocFeedbackContainer in _pydocengine:
_pydocengine.DocFeedbackContainer_swigregister(DocFeedbackContainer)
class DocFeedback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocFeedback

    def FeedbackReceived(self, container):
        return _pydocengine.DocFeedback_FeedbackReceived(self, container)

    def AcceptsPagesLocalizationFeedback(self):
        return _pydocengine.DocFeedback_AcceptsPagesLocalizationFeedback(self)

    def PagesLocalizationFeedbackReceived(self, container):
        return _pydocengine.DocFeedback_PagesLocalizationFeedbackReceived(self, container)

    def AcceptsPagePreprocessingFeedback(self):
        return _pydocengine.DocFeedback_AcceptsPagePreprocessingFeedback(self)

    def PagePrepocessingFeedbackReceived(self, container):
        return _pydocengine.DocFeedback_PagePrepocessingFeedbackReceived(self, container)

    def AcceptsRawFieldsLocalizationFeedback(self):
        return _pydocengine.DocFeedback_AcceptsRawFieldsLocalizationFeedback(self)

    def RawFieldsLocalizationFeedbackReceived(self, container):
        return _pydocengine.DocFeedback_RawFieldsLocalizationFeedbackReceived(self, container)

    def AcceptsRawFieldsRecognitionFeedback(self):
        return _pydocengine.DocFeedback_AcceptsRawFieldsRecognitionFeedback(self)

    def RawFiedlsRecognitionFeedbackReceived(self, container):
        return _pydocengine.DocFeedback_RawFiedlsRecognitionFeedbackReceived(self, container)

    def ResultReceived(self, result_received):
        return _pydocengine.DocFeedback_ResultReceived(self, result_received)

# Register DocFeedback in _pydocengine:
_pydocengine.DocFeedback_swigregister(DocFeedback)
class DocDocumentFieldInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocDocumentFieldInfo

    def GetDocumentFieldName(self):
        return _pydocengine.DocDocumentFieldInfo_GetDocumentFieldName(self)

    def GetDocumentFieldNameLocal(self):
        return _pydocengine.DocDocumentFieldInfo_GetDocumentFieldNameLocal(self)

    def GetDocumentFieldShortNameLocal(self):
        return _pydocengine.DocDocumentFieldInfo_GetDocumentFieldShortNameLocal(self)

    def GetDocumentFieldFormat(self):
        return _pydocengine.DocDocumentFieldInfo_GetDocumentFieldFormat(self)

    def GetDocumentFieldExtFormat(self):
        return _pydocengine.DocDocumentFieldInfo_GetDocumentFieldExtFormat(self)

    def GetDocumentFieldType(self):
        return _pydocengine.DocDocumentFieldInfo_GetDocumentFieldType(self)

# Register DocDocumentFieldInfo in _pydocengine:
_pydocengine.DocDocumentFieldInfo_swigregister(DocDocumentFieldInfo)
class DocDocumentFieldsInfoIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocDocumentFieldsInfoIterator_swiginit(self, _pydocengine.new_DocDocumentFieldsInfoIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocDocumentFieldsInfoIterator

    def GetKey(self):
        return _pydocengine.DocDocumentFieldsInfoIterator_GetKey(self)

    def GetDocumentFieldInfo(self):
        return _pydocengine.DocDocumentFieldsInfoIterator_GetDocumentFieldInfo(self)

    def Advance(self):
        return _pydocengine.DocDocumentFieldsInfoIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocDocumentFieldsInfoIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocDocumentFieldsInfoIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocDocumentFieldsInfoIterator___ne__(self, rvalue)

# Register DocDocumentFieldsInfoIterator in _pydocengine:
_pydocengine.DocDocumentFieldsInfoIterator_swigregister(DocDocumentFieldsInfoIterator)
class Document(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def BaseClassNameStatic():
        return _pydocengine.Document_BaseClassNameStatic()
    __swig_destroy__ = _pydocengine.delete_Document

    def GetTextFieldsCount(self):
        return _pydocengine.Document_GetTextFieldsCount(self)

    def HasTextField(self, name):
        return _pydocengine.Document_HasTextField(self, name)

    def GetTextField(self, name):
        return _pydocengine.Document_GetTextField(self, name)

    def GetMutableTextField(self, name):
        return _pydocengine.Document_GetMutableTextField(self, name)

    def SetTextField(self, name, field):
        return _pydocengine.Document_SetTextField(self, name, field)

    def RemoveTextField(self, name):
        return _pydocengine.Document_RemoveTextField(self, name)

    def TextFieldsBegin(self):
        return _pydocengine.Document_TextFieldsBegin(self)

    def TextFieldsEnd(self):
        return _pydocengine.Document_TextFieldsEnd(self)

    def GetImageFieldsCount(self):
        return _pydocengine.Document_GetImageFieldsCount(self)

    def HasImageField(self, name):
        return _pydocengine.Document_HasImageField(self, name)

    def GetImageField(self, name):
        return _pydocengine.Document_GetImageField(self, name)

    def GetMutableImageField(self, name):
        return _pydocengine.Document_GetMutableImageField(self, name)

    def SetImageField(self, name, field):
        return _pydocengine.Document_SetImageField(self, name, field)

    def RemoveImageField(self, name):
        return _pydocengine.Document_RemoveImageField(self, name)

    def ImageFieldsBegin(self):
        return _pydocengine.Document_ImageFieldsBegin(self)

    def ImageFieldsEnd(self):
        return _pydocengine.Document_ImageFieldsEnd(self)

    def GetCheckboxFieldsCount(self):
        return _pydocengine.Document_GetCheckboxFieldsCount(self)

    def HasCheckboxField(self, name):
        return _pydocengine.Document_HasCheckboxField(self, name)

    def GetCheckboxField(self, name):
        return _pydocengine.Document_GetCheckboxField(self, name)

    def GetMutableCheckboxField(self, name):
        return _pydocengine.Document_GetMutableCheckboxField(self, name)

    def SetCheckboxField(self, name, field):
        return _pydocengine.Document_SetCheckboxField(self, name, field)

    def RemoveCheckboxField(self, name):
        return _pydocengine.Document_RemoveCheckboxField(self, name)

    def CheckboxFieldsBegin(self):
        return _pydocengine.Document_CheckboxFieldsBegin(self)

    def CheckboxFieldsEnd(self):
        return _pydocengine.Document_CheckboxFieldsEnd(self)

    def GetForensicFieldsCount(self):
        return _pydocengine.Document_GetForensicFieldsCount(self)

    def HasForensicField(self, name):
        return _pydocengine.Document_HasForensicField(self, name)

    def GetForensicField(self, name):
        return _pydocengine.Document_GetForensicField(self, name)

    def GetMutableForensicField(self, name):
        return _pydocengine.Document_GetMutableForensicField(self, name)

    def SetForensicField(self, name, field):
        return _pydocengine.Document_SetForensicField(self, name, field)

    def RemoveForensicField(self, name):
        return _pydocengine.Document_RemoveForensicField(self, name)

    def ForensicFieldsBegin(self):
        return _pydocengine.Document_ForensicFieldsBegin(self)

    def ForensicFieldsEnd(self):
        return _pydocengine.Document_ForensicFieldsEnd(self)

    def GetForensicCheckFieldsCount(self):
        return _pydocengine.Document_GetForensicCheckFieldsCount(self)

    def HasForensicCheckField(self, name):
        return _pydocengine.Document_HasForensicCheckField(self, name)

    def GetForensicCheckField(self, name):
        return _pydocengine.Document_GetForensicCheckField(self, name)

    def GetMutableForensicCheckField(self, name):
        return _pydocengine.Document_GetMutableForensicCheckField(self, name)

    def GetForensicCheckFieldPtr(self, name):
        return _pydocengine.Document_GetForensicCheckFieldPtr(self, name)

    def GetMutableForensicCheckFieldPtr(self, name):
        return _pydocengine.Document_GetMutableForensicCheckFieldPtr(self, name)

    def SetForensicCheckField(self, name, field):
        return _pydocengine.Document_SetForensicCheckField(self, name, field)

    def RemoveForensicCheckField(self, name):
        return _pydocengine.Document_RemoveForensicCheckField(self, name)

    def ForensicCheckFieldsBegin(self):
        return _pydocengine.Document_ForensicCheckFieldsBegin(self)

    def ForensicCheckFieldsEnd(self):
        return _pydocengine.Document_ForensicCheckFieldsEnd(self)

    def GetTableFieldsCount(self):
        return _pydocengine.Document_GetTableFieldsCount(self)

    def HasTableField(self, name):
        return _pydocengine.Document_HasTableField(self, name)

    def GetTableField(self, name):
        return _pydocengine.Document_GetTableField(self, name)

    def GetMutableTableField(self, name):
        return _pydocengine.Document_GetMutableTableField(self, name)

    def SetTableField(self, name, field):
        return _pydocengine.Document_SetTableField(self, name, field)

    def RemoveTableField(self, name):
        return _pydocengine.Document_RemoveTableField(self, name)

    def TableFieldsBegin(self):
        return _pydocengine.Document_TableFieldsBegin(self)

    def TableFieldsEnd(self):
        return _pydocengine.Document_TableFieldsEnd(self)

    def GetBarcodeFieldsCount(self):
        return _pydocengine.Document_GetBarcodeFieldsCount(self)

    def HasBarcodeField(self, name):
        return _pydocengine.Document_HasBarcodeField(self, name)

    def GetBarcodeField(self, name):
        return _pydocengine.Document_GetBarcodeField(self, name)

    def GetMutableBarcodeField(self, name):
        return _pydocengine.Document_GetMutableBarcodeField(self, name)

    def SetBarcodeField(self, name, field):
        return _pydocengine.Document_SetBarcodeField(self, name, field)

    def RemoveBarcodeField(self, name):
        return _pydocengine.Document_RemoveBarcodeField(self, name)

    def BarcodeFieldsBegin(self):
        return _pydocengine.Document_BarcodeFieldsBegin(self)

    def BarcodeFieldsEnd(self):
        return _pydocengine.Document_BarcodeFieldsEnd(self)

    def GetAttributesCount(self):
        return _pydocengine.Document_GetAttributesCount(self)

    def HasAttribute(self, attr_name):
        return _pydocengine.Document_HasAttribute(self, attr_name)

    def GetAttribute(self, attr_name):
        return _pydocengine.Document_GetAttribute(self, attr_name)

    def SetAttribute(self, attr_name, attr_value):
        return _pydocengine.Document_SetAttribute(self, attr_name, attr_value)

    def RemoveAttribute(self, attr_name):
        return _pydocengine.Document_RemoveAttribute(self, attr_name)

    def AttributesBegin(self):
        return _pydocengine.Document_AttributesBegin(self)

    def AttributesEnd(self):
        return _pydocengine.Document_AttributesEnd(self)

    def GetType(self):
        return _pydocengine.Document_GetType(self)

    def Serialize(self, serializer):
        return _pydocengine.Document_Serialize(self, serializer)

    def GetPhysicalDocIdx(self):
        return _pydocengine.Document_GetPhysicalDocIdx(self)

# Register Document in _pydocengine:
_pydocengine.Document_swigregister(Document)
class DocDocumentInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocDocumentInfo

    def GetDocumentName(self):
        return _pydocengine.DocDocumentInfo_GetDocumentName(self)

    def GetDocumentNameLocal(self):
        return _pydocengine.DocDocumentInfo_GetDocumentNameLocal(self)

    def GetDocumentShortNameLocal(self):
        return _pydocengine.DocDocumentInfo_GetDocumentShortNameLocal(self)

    def GetDocumentMultipageInfo(self):
        return _pydocengine.DocDocumentInfo_GetDocumentMultipageInfo(self)

    def GetDocumentNoFields(self):
        return _pydocengine.DocDocumentInfo_GetDocumentNoFields(self)

    def DocumentFieldsInfoBegin(self):
        return _pydocengine.DocDocumentInfo_DocumentFieldsInfoBegin(self)

    def DocumentFieldsInfoEnd(self):
        return _pydocengine.DocDocumentInfo_DocumentFieldsInfoEnd(self)

# Register DocDocumentInfo in _pydocengine:
_pydocengine.DocDocumentInfo_swigregister(DocDocumentInfo)
class DocumentsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocumentsIterator_swiginit(self, _pydocengine.new_DocumentsIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocumentsIterator

    def GetID(self):
        return _pydocengine.DocumentsIterator_GetID(self)

    def GetDocument(self):
        return _pydocengine.DocumentsIterator_GetDocument(self)

    def Advance(self):
        return _pydocengine.DocumentsIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocumentsIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocumentsIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocumentsIterator___ne__(self, rvalue)

    def GetTags(self):
        return _pydocengine.DocumentsIterator_GetTags(self)

# Register DocumentsIterator in _pydocengine:
_pydocengine.DocumentsIterator_swigregister(DocumentsIterator)
class DocumentsMutableIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocumentsMutableIterator_swiginit(self, _pydocengine.new_DocumentsMutableIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocumentsMutableIterator

    def GetID(self):
        return _pydocengine.DocumentsMutableIterator_GetID(self)

    def GetDocument(self):
        return _pydocengine.DocumentsMutableIterator_GetDocument(self)

    def GetMutableDocument(self):
        return _pydocengine.DocumentsMutableIterator_GetMutableDocument(self)

    def Advance(self):
        return _pydocengine.DocumentsMutableIterator_Advance(self)

    def Equals(self, rvalue):
        return _pydocengine.DocumentsMutableIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pydocengine.DocumentsMutableIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pydocengine.DocumentsMutableIterator___ne__(self, rvalue)

    def GetTags(self):
        return _pydocengine.DocumentsMutableIterator_GetTags(self)

# Register DocumentsMutableIterator in _pydocengine:
_pydocengine.DocumentsMutableIterator_swigregister(DocumentsMutableIterator)
class DocumentsSliceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocumentsSliceIterator_swiginit(self, _pydocengine.new_DocumentsSliceIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocumentsSliceIterator

    def GetID(self):
        return _pydocengine.DocumentsSliceIterator_GetID(self)

    def GetDocument(self):
        return _pydocengine.DocumentsSliceIterator_GetDocument(self)

    def GetTags(self):
        return _pydocengine.DocumentsSliceIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocumentsSliceIterator_Advance(self)

    def Finished(self):
        return _pydocengine.DocumentsSliceIterator_Finished(self)

# Register DocumentsSliceIterator in _pydocengine:
_pydocengine.DocumentsSliceIterator_swigregister(DocumentsSliceIterator)
class DocumentsMutableSliceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pydocengine.DocumentsMutableSliceIterator_swiginit(self, _pydocengine.new_DocumentsMutableSliceIterator(other))
    __swig_destroy__ = _pydocengine.delete_DocumentsMutableSliceIterator

    def GetID(self):
        return _pydocengine.DocumentsMutableSliceIterator_GetID(self)

    def GetDocument(self):
        return _pydocengine.DocumentsMutableSliceIterator_GetDocument(self)

    def GetMutableDocument(self):
        return _pydocengine.DocumentsMutableSliceIterator_GetMutableDocument(self)

    def GetTags(self):
        return _pydocengine.DocumentsMutableSliceIterator_GetTags(self)

    def Advance(self):
        return _pydocengine.DocumentsMutableSliceIterator_Advance(self)

    def Finished(self):
        return _pydocengine.DocumentsMutableSliceIterator_Finished(self)

# Register DocumentsMutableSliceIterator in _pydocengine:
_pydocengine.DocumentsMutableSliceIterator_swigregister(DocumentsMutableSliceIterator)
class DocEngine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocEngine

    def CreateSessionSettings(self):
        return _pydocengine.DocEngine_CreateSessionSettings(self)

    @staticmethod
    def Create(*args):
        return _pydocengine.DocEngine_Create(*args)

    @staticmethod
    def CreateFromEmbeddedBundle(lazy_configuration=True):
        return _pydocengine.DocEngine_CreateFromEmbeddedBundle(lazy_configuration)

    @staticmethod
    def GetVersion():
        return _pydocengine.DocEngine_GetVersion()

    def SpawnSession(self, *args):
        return _pydocengine.DocEngine_SpawnSession(self, *args)

    def CreateVideoSessionSettings(self):
        return _pydocengine.DocEngine_CreateVideoSessionSettings(self)

    def SpawnVideoSession(self, settings, signature, feedback_reporter=None):
        return _pydocengine.DocEngine_SpawnVideoSession(self, settings, signature, feedback_reporter)

# Register DocEngine in _pydocengine:
_pydocengine.DocEngine_swigregister(DocEngine)
class DocProcessingArguments(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocProcessingArguments

    def GetTagArgumentsCount(self):
        return _pydocengine.DocProcessingArguments_GetTagArgumentsCount(self)

    def GetTagArgument(self, index):
        return _pydocengine.DocProcessingArguments_GetTagArgument(self, index)

    def SetTagArgument(self, index, argument):
        return _pydocengine.DocProcessingArguments_SetTagArgument(self, index, argument)

    def Resize(self, size):
        return _pydocengine.DocProcessingArguments_Resize(self, size)

# Register DocProcessingArguments in _pydocengine:
_pydocengine.DocProcessingArguments_swigregister(DocProcessingArguments)
class DocExternalProcessorInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocExternalProcessorInterface

    def Process(self, recognition_result, processing_settings, processing_arguments):
        return _pydocengine.DocExternalProcessorInterface_Process(self, recognition_result, processing_settings, processing_arguments)

# Register DocExternalProcessorInterface in _pydocengine:
_pydocengine.DocExternalProcessorInterface_swigregister(DocExternalProcessorInterface)
class DocResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocResult

    def PartialClone(self):
        return _pydocengine.DocResult_PartialClone(self)

    def GetDocumentsCount(self):
        return _pydocengine.DocResult_GetDocumentsCount(self)

    def HasDocument(self, doc_id):
        return _pydocengine.DocResult_HasDocument(self, doc_id)

    def GetDocument(self, doc_id):
        return _pydocengine.DocResult_GetDocument(self, doc_id)

    def DocumentsBegin(self):
        return _pydocengine.DocResult_DocumentsBegin(self)

    def DocumentsEnd(self):
        return _pydocengine.DocResult_DocumentsEnd(self)

    def Serialize(self, serializer):
        return _pydocengine.DocResult_Serialize(self, serializer)

    def GetPhysicalDocument(self, idx):
        return _pydocengine.DocResult_GetPhysicalDocument(self, idx)

    def GetPhysicalDocumentPtr(self, idx):
        return _pydocengine.DocResult_GetPhysicalDocumentPtr(self, idx)

    def GetScenesCount(self):
        return _pydocengine.DocResult_GetScenesCount(self)

    def GetSceneInfo(self, idx):
        return _pydocengine.DocResult_GetSceneInfo(self, idx)

    def GetLastSceneInfo(self):
        return _pydocengine.DocResult_GetLastSceneInfo(self)

    def GetGraphicalStructure(self):
        return _pydocengine.DocResult_GetGraphicalStructure(self)

    def GetMutableGraphicalStructure(self):
        return _pydocengine.DocResult_GetMutableGraphicalStructure(self)

    def GetMutableDocument(self, doc_id):
        return _pydocengine.DocResult_GetMutableDocument(self, doc_id)

    def GetDocumentTags(self, doc_id):
        return _pydocengine.DocResult_GetDocumentTags(self, doc_id)

    def AddDocument(self, doc):
        return _pydocengine.DocResult_AddDocument(self, doc)

    def SetDocument(self, doc_id, doc):
        return _pydocengine.DocResult_SetDocument(self, doc_id, doc)

    def RemoveDocument(self, doc_id):
        return _pydocengine.DocResult_RemoveDocument(self, doc_id)

    def MutableDocumentsBegin(self):
        return _pydocengine.DocResult_MutableDocumentsBegin(self)

    def MutableDocumentsEnd(self):
        return _pydocengine.DocResult_MutableDocumentsEnd(self)

    def DocumentsSlice(self, tag):
        return _pydocengine.DocResult_DocumentsSlice(self, tag)

    def MutableDocumentsSlice(self, tag):
        return _pydocengine.DocResult_MutableDocumentsSlice(self, tag)

    def CanBuildPDFABuffer(self):
        return _pydocengine.DocResult_CanBuildPDFABuffer(self)

    def BuildPDFABuffer(self):
        return _pydocengine.DocResult_BuildPDFABuffer(self)

    def GetPDFABuffer(self, output_buf):
        return _pydocengine.DocResult_GetPDFABuffer(self, output_buf)

    def GetPDFABufferSize(self):
        return _pydocengine.DocResult_GetPDFABufferSize(self)

    def SetAddTextMode(self, mode_name):
        return _pydocengine.DocResult_SetAddTextMode(self, mode_name)

    def GetAddTextMode(self):
        return _pydocengine.DocResult_GetAddTextMode(self)

    def HasAddTextMode(self, mode_name):
        return _pydocengine.DocResult_HasAddTextMode(self, mode_name)

    def AddTextModesBegin(self):
        return _pydocengine.DocResult_AddTextModesBegin(self)

    def AddTextModesEnd(self):
        return _pydocengine.DocResult_AddTextModesEnd(self)

    def SetTextTypeMode(self, mode_name):
        return _pydocengine.DocResult_SetTextTypeMode(self, mode_name)

    def GetTextTypeMode(self):
        return _pydocengine.DocResult_GetTextTypeMode(self)

    def HasTextTypeMode(self, mode_name):
        return _pydocengine.DocResult_HasTextTypeMode(self, mode_name)

    def TextTypeModesBegin(self):
        return _pydocengine.DocResult_TextTypeModesBegin(self)

    def TextTypeModesEnd(self):
        return _pydocengine.DocResult_TextTypeModesEnd(self)

    def SetColourMode(self, with_colour):
        return _pydocengine.DocResult_SetColourMode(self, with_colour)

    def GetColourMode(self):
        return _pydocengine.DocResult_GetColourMode(self)

# Register DocResult in _pydocengine:
_pydocengine.DocResult_swigregister(DocResult)
class DocProcessingSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocProcessingSettings

    def GetOptionsCount(self):
        return _pydocengine.DocProcessingSettings_GetOptionsCount(self)

    def HasOption(self, option_name):
        return _pydocengine.DocProcessingSettings_HasOption(self, option_name)

    def GetOption(self, option_name):
        return _pydocengine.DocProcessingSettings_GetOption(self, option_name)

    def SetOption(self, option_name, option_value):
        return _pydocengine.DocProcessingSettings_SetOption(self, option_name, option_value)

    def RemoveOption(self, option_name):
        return _pydocengine.DocProcessingSettings_RemoveOption(self, option_name)

    def OptionsBegin(self):
        return _pydocengine.DocProcessingSettings_OptionsBegin(self)

    def OptionsEnd(self):
        return _pydocengine.DocProcessingSettings_OptionsEnd(self)

    def GetSessionOptionsCount(self):
        return _pydocengine.DocProcessingSettings_GetSessionOptionsCount(self)

    def HasSessionOption(self, option_name):
        return _pydocengine.DocProcessingSettings_HasSessionOption(self, option_name)

    def GetSessionOption(self, option_name):
        return _pydocengine.DocProcessingSettings_GetSessionOption(self, option_name)

    def SessionOptionsBegin(self):
        return _pydocengine.DocProcessingSettings_SessionOptionsBegin(self)

    def SessionOptionsEnd(self):
        return _pydocengine.DocProcessingSettings_SessionOptionsEnd(self)

    def GetEnabledDocumentTypesCount(self):
        return _pydocengine.DocProcessingSettings_GetEnabledDocumentTypesCount(self)

    def HasEnabledDocumentType(self, doc_name):
        return _pydocengine.DocProcessingSettings_HasEnabledDocumentType(self, doc_name)

    def GetEnabledDocumentType(self, doc_id):
        return _pydocengine.DocProcessingSettings_GetEnabledDocumentType(self, doc_id)

    def GetCurrentSourceID(self):
        return _pydocengine.DocProcessingSettings_GetCurrentSourceID(self)

    def SetCurrentSourceID(self, source_id):
        return _pydocengine.DocProcessingSettings_SetCurrentSourceID(self, source_id)

    def GetAvailableRoutinesCount(self):
        return _pydocengine.DocProcessingSettings_GetAvailableRoutinesCount(self)

    def HasAvailableRoutine(self, routine_name):
        return _pydocengine.DocProcessingSettings_HasAvailableRoutine(self, routine_name)

    def AvailableRoutinesBegin(self):
        return _pydocengine.DocProcessingSettings_AvailableRoutinesBegin(self)

    def AvailableRoutinesEnd(self):
        return _pydocengine.DocProcessingSettings_AvailableRoutinesEnd(self)

    def RoutinesQueueSize(self):
        return _pydocengine.DocProcessingSettings_RoutinesQueueSize(self)

    def RoutinesQueueFront(self):
        return _pydocengine.DocProcessingSettings_RoutinesQueueFront(self)

    def RoutinesQueuePush(self, routine_name):
        return _pydocengine.DocProcessingSettings_RoutinesQueuePush(self, routine_name)

    def RoutinesQueuePop(self):
        return _pydocengine.DocProcessingSettings_RoutinesQueuePop(self)

    def RoutinesQueueClear(self):
        return _pydocengine.DocProcessingSettings_RoutinesQueueClear(self)

    def BindFeedbackReporter(self, feedback_reporter):
        return _pydocengine.DocProcessingSettings_BindFeedbackReporter(self, feedback_reporter)

    def GetFeedbackReporter(self):
        return _pydocengine.DocProcessingSettings_GetFeedbackReporter(self)

# Register DocProcessingSettings in _pydocengine:
_pydocengine.DocProcessingSettings_swigregister(DocProcessingSettings)
class DocSession(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocSession

    def CreateProcessingSettings(self):
        return _pydocengine.DocSession_CreateProcessingSettings(self)

    def GetActivationRequest(self):
        return _pydocengine.DocSession_GetActivationRequest(self)

    def Activate(self, activation_response):
        return _pydocengine.DocSession_Activate(self, activation_response)

    def IsActivated(self):
        return _pydocengine.DocSession_IsActivated(self)

    def ProcessImage(self, in_image, settings=None):
        return _pydocengine.DocSession_ProcessImage(self, in_image, settings)

    def Reset(self):
        return _pydocengine.DocSession_Reset(self)

    def GetCurrentResult(self):
        return _pydocengine.DocSession_GetCurrentResult(self)

    def GetType(self):
        return _pydocengine.DocSession_GetType(self)

    def RegisterImage(self, in_image):
        return _pydocengine.DocSession_RegisterImage(self, in_image)

    def Process(self, settings):
        return _pydocengine.DocSession_Process(self, settings)

    def GetMutableCurrentResult(self):
        return _pydocengine.DocSession_GetMutableCurrentResult(self)

# Register DocSession in _pydocengine:
_pydocengine.DocSession_swigregister(DocSession)
class DocSessionSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocSessionSettings

    def Clone(self):
        return _pydocengine.DocSessionSettings_Clone(self)

    def GetOptionsCount(self):
        return _pydocengine.DocSessionSettings_GetOptionsCount(self)

    def HasOption(self, option_name):
        return _pydocengine.DocSessionSettings_HasOption(self, option_name)

    def GetOption(self, option_name):
        return _pydocengine.DocSessionSettings_GetOption(self, option_name)

    def SetOption(self, option_name, option_value):
        return _pydocengine.DocSessionSettings_SetOption(self, option_name, option_value)

    def RemoveOption(self, option_name):
        return _pydocengine.DocSessionSettings_RemoveOption(self, option_name)

    def OptionsBegin(self):
        return _pydocengine.DocSessionSettings_OptionsBegin(self)

    def OptionsEnd(self):
        return _pydocengine.DocSessionSettings_OptionsEnd(self)

    def GetSupportedModesCount(self):
        return _pydocengine.DocSessionSettings_GetSupportedModesCount(self)

    def HasSupportedMode(self, mode_name):
        return _pydocengine.DocSessionSettings_HasSupportedMode(self, mode_name)

    def GetSupportedMode(self, mode_id):
        return _pydocengine.DocSessionSettings_GetSupportedMode(self, mode_id)

    def SupportedModesBegin(self):
        return _pydocengine.DocSessionSettings_SupportedModesBegin(self)

    def SupportedModesEnd(self):
        return _pydocengine.DocSessionSettings_SupportedModesEnd(self)

    def GetCurrentMode(self):
        return _pydocengine.DocSessionSettings_GetCurrentMode(self)

    def SetCurrentMode(self, mode_name):
        return _pydocengine.DocSessionSettings_SetCurrentMode(self, mode_name)

    def GetInternalEnginesCount(self):
        return _pydocengine.DocSessionSettings_GetInternalEnginesCount(self)

    def GetSupportedDocumentTypesCount(self, engine_id):
        return _pydocengine.DocSessionSettings_GetSupportedDocumentTypesCount(self, engine_id)

    def HasSupportedDocumentType(self, engine_id, doc_name):
        return _pydocengine.DocSessionSettings_HasSupportedDocumentType(self, engine_id, doc_name)

    def GetSupportedDocumentType(self, engine_id, doc_id):
        return _pydocengine.DocSessionSettings_GetSupportedDocumentType(self, engine_id, doc_id)

    def GetEnabledDocumentTypesCount(self):
        return _pydocengine.DocSessionSettings_GetEnabledDocumentTypesCount(self)

    def HasEnabledDocumentType(self, doc_name):
        return _pydocengine.DocSessionSettings_HasEnabledDocumentType(self, doc_name)

    def GetEnabledDocumentType(self, doc_id):
        return _pydocengine.DocSessionSettings_GetEnabledDocumentType(self, doc_id)

    def GetDocumentInfo(self, doc_name):
        return _pydocengine.DocSessionSettings_GetDocumentInfo(self, doc_name)

    def AddEnabledDocumentTypes(self, doc_type_mask):
        return _pydocengine.DocSessionSettings_AddEnabledDocumentTypes(self, doc_type_mask)

    def RemoveEnabledDocumentTypes(self, doc_type_mask):
        return _pydocengine.DocSessionSettings_RemoveEnabledDocumentTypes(self, doc_type_mask)

    def PermissiblePrefixDocMasksBegin(self):
        return _pydocengine.DocSessionSettings_PermissiblePrefixDocMasksBegin(self)

    def PermissiblePrefixDocMasksEnd(self):
        return _pydocengine.DocSessionSettings_PermissiblePrefixDocMasksEnd(self)

    def IsForensicsEnabled(self):
        return _pydocengine.DocSessionSettings_IsForensicsEnabled(self)

    def EnableForensics(self):
        return _pydocengine.DocSessionSettings_EnableForensics(self)

    def DisableForensics(self):
        return _pydocengine.DocSessionSettings_DisableForensics(self)

# Register DocSessionSettings in _pydocengine:
_pydocengine.DocSessionSettings_swigregister(DocSessionSettings)
class DocVideoSession(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydocengine.delete_DocVideoSession

    def CreateProcessingSettings(self):
        return _pydocengine.DocVideoSession_CreateProcessingSettings(self)

    def GetActivationRequest(self):
        return _pydocengine.DocVideoSession_GetActivationRequest(self)

    def Activate(self, activation_response):
        return _pydocengine.DocVideoSession_Activate(self, activation_response)

    def IsActivated(self):
        return _pydocengine.DocVideoSession_IsActivated(self)

    def ProcessImage(self, in_image, settings):
        return _pydocengine.DocVideoSession_ProcessImage(self, in_image, settings)

    def Reset(self):
        return _pydocengine.DocVideoSession_Reset(self)

    def GetCurrentResult(self):
        return _pydocengine.DocVideoSession_GetCurrentResult(self)

    def GetMutableCurrentResult(self):
        return _pydocengine.DocVideoSession_GetMutableCurrentResult(self)

# Register DocVideoSession in _pydocengine:
_pydocengine.DocVideoSession_swigregister(DocVideoSession)

