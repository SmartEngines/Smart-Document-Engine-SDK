//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.doc {

using se.common;

public class DocProcessingSettings : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public DocProcessingSettings(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(DocProcessingSettings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(DocProcessingSettings obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DocProcessingSettings() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csdocenginePINVOKE.delete_DocProcessingSettings(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual int GetOptionsCount() {
    int ret = csdocenginePINVOKE.DocProcessingSettings_GetOptionsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasOption(string option_name) {
    bool ret = csdocenginePINVOKE.DocProcessingSettings_HasOption(swigCPtr, option_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetOption(string option_name) {
    string ret = csdocenginePINVOKE.DocProcessingSettings_GetOption(swigCPtr, option_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetOption(string option_name, string option_value) {
    csdocenginePINVOKE.DocProcessingSettings_SetOption(swigCPtr, option_name, option_value);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveOption(string option_name) {
    csdocenginePINVOKE.DocProcessingSettings_RemoveOption(swigCPtr, option_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual StringsMapIterator OptionsBegin() {
    StringsMapIterator ret = new StringsMapIterator(csdocenginePINVOKE.DocProcessingSettings_OptionsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator OptionsEnd() {
    StringsMapIterator ret = new StringsMapIterator(csdocenginePINVOKE.DocProcessingSettings_OptionsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetSessionOptionsCount() {
    int ret = csdocenginePINVOKE.DocProcessingSettings_GetSessionOptionsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasSessionOption(string option_name) {
    bool ret = csdocenginePINVOKE.DocProcessingSettings_HasSessionOption(swigCPtr, option_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetSessionOption(string option_name) {
    string ret = csdocenginePINVOKE.DocProcessingSettings_GetSessionOption(swigCPtr, option_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator SessionOptionsBegin() {
    StringsMapIterator ret = new StringsMapIterator(csdocenginePINVOKE.DocProcessingSettings_SessionOptionsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator SessionOptionsEnd() {
    StringsMapIterator ret = new StringsMapIterator(csdocenginePINVOKE.DocProcessingSettings_SessionOptionsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetEnabledDocumentTypesCount() {
    int ret = csdocenginePINVOKE.DocProcessingSettings_GetEnabledDocumentTypesCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasEnabledDocumentType(string doc_name) {
    bool ret = csdocenginePINVOKE.DocProcessingSettings_HasEnabledDocumentType(swigCPtr, doc_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetEnabledDocumentType(int doc_id) {
    string ret = csdocenginePINVOKE.DocProcessingSettings_GetEnabledDocumentType(swigCPtr, doc_id);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetCurrentSourceID() {
    int ret = csdocenginePINVOKE.DocProcessingSettings_GetCurrentSourceID(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetCurrentSourceID(int source_id) {
    csdocenginePINVOKE.DocProcessingSettings_SetCurrentSourceID(swigCPtr, source_id);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetAvailableRoutinesCount() {
    int ret = csdocenginePINVOKE.DocProcessingSettings_GetAvailableRoutinesCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasAvailableRoutine(string routine_name) {
    bool ret = csdocenginePINVOKE.DocProcessingSettings_HasAvailableRoutine(swigCPtr, routine_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator AvailableRoutinesBegin() {
    StringsMapIterator ret = new StringsMapIterator(csdocenginePINVOKE.DocProcessingSettings_AvailableRoutinesBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator AvailableRoutinesEnd() {
    StringsMapIterator ret = new StringsMapIterator(csdocenginePINVOKE.DocProcessingSettings_AvailableRoutinesEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int RoutinesQueueSize() {
    int ret = csdocenginePINVOKE.DocProcessingSettings_RoutinesQueueSize(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string RoutinesQueueFront() {
    string ret = csdocenginePINVOKE.DocProcessingSettings_RoutinesQueueFront(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void RoutinesQueuePush(string routine_name) {
    csdocenginePINVOKE.DocProcessingSettings_RoutinesQueuePush(swigCPtr, routine_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RoutinesQueuePop() {
    csdocenginePINVOKE.DocProcessingSettings_RoutinesQueuePop(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RoutinesQueueClear() {
    csdocenginePINVOKE.DocProcessingSettings_RoutinesQueueClear(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void BindFeedbackReporter(DocFeedback feedback_reporter) {
    csdocenginePINVOKE.DocProcessingSettings_BindFeedbackReporter(swigCPtr, DocFeedback.getCPtr(feedback_reporter));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual DocFeedback GetFeedbackReporter() {
    global::System.IntPtr cPtr = csdocenginePINVOKE.DocProcessingSettings_GetFeedbackReporter(swigCPtr);
    DocFeedback ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocFeedback(cPtr, false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
