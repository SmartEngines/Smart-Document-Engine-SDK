//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.doc {

using se.common;

public class Document : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Document(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Document obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(Document obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Document() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csdocenginePINVOKE.delete_Document(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static string BaseClassNameStatic() {
    string ret = csdocenginePINVOKE.Document_BaseClassNameStatic();
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetTextFieldsCount() {
    int ret = csdocenginePINVOKE.Document_GetTextFieldsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasTextField(string name) {
    bool ret = csdocenginePINVOKE.Document_HasTextField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocTextField GetTextField(string name) {
    DocTextField ret = new DocTextField(csdocenginePINVOKE.Document_GetTextField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocTextField GetMutableTextField(string name) {
    DocTextField ret = new DocTextField(csdocenginePINVOKE.Document_GetMutableTextField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetTextField(string name, DocTextField field) {
    csdocenginePINVOKE.Document_SetTextField(swigCPtr, name, DocTextField.getCPtr(field));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveTextField(string name) {
    csdocenginePINVOKE.Document_RemoveTextField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual DocTextFieldsIterator TextFieldsBegin() {
    DocTextFieldsIterator ret = new DocTextFieldsIterator(csdocenginePINVOKE.Document_TextFieldsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocTextFieldsIterator TextFieldsEnd() {
    DocTextFieldsIterator ret = new DocTextFieldsIterator(csdocenginePINVOKE.Document_TextFieldsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetImageFieldsCount() {
    int ret = csdocenginePINVOKE.Document_GetImageFieldsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasImageField(string name) {
    bool ret = csdocenginePINVOKE.Document_HasImageField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocImageField GetImageField(string name) {
    DocImageField ret = new DocImageField(csdocenginePINVOKE.Document_GetImageField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocImageField GetMutableImageField(string name) {
    DocImageField ret = new DocImageField(csdocenginePINVOKE.Document_GetMutableImageField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetImageField(string name, DocImageField field) {
    csdocenginePINVOKE.Document_SetImageField(swigCPtr, name, DocImageField.getCPtr(field));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveImageField(string name) {
    csdocenginePINVOKE.Document_RemoveImageField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual DocImageFieldsIterator ImageFieldsBegin() {
    DocImageFieldsIterator ret = new DocImageFieldsIterator(csdocenginePINVOKE.Document_ImageFieldsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocImageFieldsIterator ImageFieldsEnd() {
    DocImageFieldsIterator ret = new DocImageFieldsIterator(csdocenginePINVOKE.Document_ImageFieldsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetCheckboxFieldsCount() {
    int ret = csdocenginePINVOKE.Document_GetCheckboxFieldsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasCheckboxField(string name) {
    bool ret = csdocenginePINVOKE.Document_HasCheckboxField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocCheckboxField GetCheckboxField(string name) {
    DocCheckboxField ret = new DocCheckboxField(csdocenginePINVOKE.Document_GetCheckboxField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocCheckboxField GetMutableCheckboxField(string name) {
    DocCheckboxField ret = new DocCheckboxField(csdocenginePINVOKE.Document_GetMutableCheckboxField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetCheckboxField(string name, DocCheckboxField field) {
    csdocenginePINVOKE.Document_SetCheckboxField(swigCPtr, name, DocCheckboxField.getCPtr(field));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveCheckboxField(string name) {
    csdocenginePINVOKE.Document_RemoveCheckboxField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual DocCheckboxFieldsIterator CheckboxFieldsBegin() {
    DocCheckboxFieldsIterator ret = new DocCheckboxFieldsIterator(csdocenginePINVOKE.Document_CheckboxFieldsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocCheckboxFieldsIterator CheckboxFieldsEnd() {
    DocCheckboxFieldsIterator ret = new DocCheckboxFieldsIterator(csdocenginePINVOKE.Document_CheckboxFieldsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetForensicFieldsCount() {
    int ret = csdocenginePINVOKE.Document_GetForensicFieldsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasForensicField(string name) {
    bool ret = csdocenginePINVOKE.Document_HasForensicField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocForensicField GetForensicField(string name) {
    DocForensicField ret = new DocForensicField(csdocenginePINVOKE.Document_GetForensicField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocForensicField GetMutableForensicField(string name) {
    DocForensicField ret = new DocForensicField(csdocenginePINVOKE.Document_GetMutableForensicField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetForensicField(string name, DocForensicField field) {
    csdocenginePINVOKE.Document_SetForensicField(swigCPtr, name, DocForensicField.getCPtr(field));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveForensicField(string name) {
    csdocenginePINVOKE.Document_RemoveForensicField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual DocForensicFieldsIterator ForensicFieldsBegin() {
    DocForensicFieldsIterator ret = new DocForensicFieldsIterator(csdocenginePINVOKE.Document_ForensicFieldsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocForensicFieldsIterator ForensicFieldsEnd() {
    DocForensicFieldsIterator ret = new DocForensicFieldsIterator(csdocenginePINVOKE.Document_ForensicFieldsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetForensicCheckFieldsCount() {
    int ret = csdocenginePINVOKE.Document_GetForensicCheckFieldsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasForensicCheckField(string name) {
    bool ret = csdocenginePINVOKE.Document_HasForensicCheckField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocForensicCheckField GetForensicCheckField(string name) {
    DocForensicCheckField ret = new DocForensicCheckField(csdocenginePINVOKE.Document_GetForensicCheckField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocForensicCheckField GetMutableForensicCheckField(string name) {
    DocForensicCheckField ret = new DocForensicCheckField(csdocenginePINVOKE.Document_GetMutableForensicCheckField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocForensicCheckField GetForensicCheckFieldPtr(string name) {
    global::System.IntPtr cPtr = csdocenginePINVOKE.Document_GetForensicCheckFieldPtr(swigCPtr, name);
    DocForensicCheckField ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocForensicCheckField(cPtr, false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocForensicCheckField GetMutableForensicCheckFieldPtr(string name) {
    global::System.IntPtr cPtr = csdocenginePINVOKE.Document_GetMutableForensicCheckFieldPtr(swigCPtr, name);
    DocForensicCheckField ret = (cPtr == global::System.IntPtr.Zero) ? null : new DocForensicCheckField(cPtr, false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetForensicCheckField(string name, DocForensicCheckField field) {
    csdocenginePINVOKE.Document_SetForensicCheckField(swigCPtr, name, DocForensicCheckField.getCPtr(field));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveForensicCheckField(string name) {
    csdocenginePINVOKE.Document_RemoveForensicCheckField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual DocForensicCheckFieldsIterator ForensicCheckFieldsBegin() {
    DocForensicCheckFieldsIterator ret = new DocForensicCheckFieldsIterator(csdocenginePINVOKE.Document_ForensicCheckFieldsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocForensicCheckFieldsIterator ForensicCheckFieldsEnd() {
    DocForensicCheckFieldsIterator ret = new DocForensicCheckFieldsIterator(csdocenginePINVOKE.Document_ForensicCheckFieldsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetTableFieldsCount() {
    int ret = csdocenginePINVOKE.Document_GetTableFieldsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasTableField(string name) {
    bool ret = csdocenginePINVOKE.Document_HasTableField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocTableField GetTableField(string name) {
    DocTableField ret = new DocTableField(csdocenginePINVOKE.Document_GetTableField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocTableField GetMutableTableField(string name) {
    DocTableField ret = new DocTableField(csdocenginePINVOKE.Document_GetMutableTableField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetTableField(string name, DocTableField field) {
    csdocenginePINVOKE.Document_SetTableField(swigCPtr, name, DocTableField.getCPtr(field));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveTableField(string name) {
    csdocenginePINVOKE.Document_RemoveTableField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual DocTableFieldsIterator TableFieldsBegin() {
    DocTableFieldsIterator ret = new DocTableFieldsIterator(csdocenginePINVOKE.Document_TableFieldsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocTableFieldsIterator TableFieldsEnd() {
    DocTableFieldsIterator ret = new DocTableFieldsIterator(csdocenginePINVOKE.Document_TableFieldsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetBarcodeFieldsCount() {
    int ret = csdocenginePINVOKE.Document_GetBarcodeFieldsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasBarcodeField(string name) {
    bool ret = csdocenginePINVOKE.Document_HasBarcodeField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocBarcodeField GetBarcodeField(string name) {
    DocBarcodeField ret = new DocBarcodeField(csdocenginePINVOKE.Document_GetBarcodeField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocBarcodeField GetMutableBarcodeField(string name) {
    DocBarcodeField ret = new DocBarcodeField(csdocenginePINVOKE.Document_GetMutableBarcodeField(swigCPtr, name), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetBarcodeField(string name, DocBarcodeField field) {
    csdocenginePINVOKE.Document_SetBarcodeField(swigCPtr, name, DocBarcodeField.getCPtr(field));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveBarcodeField(string name) {
    csdocenginePINVOKE.Document_RemoveBarcodeField(swigCPtr, name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual DocBarcodeFieldsIterator BarcodeFieldsBegin() {
    DocBarcodeFieldsIterator ret = new DocBarcodeFieldsIterator(csdocenginePINVOKE.Document_BarcodeFieldsBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocBarcodeFieldsIterator BarcodeFieldsEnd() {
    DocBarcodeFieldsIterator ret = new DocBarcodeFieldsIterator(csdocenginePINVOKE.Document_BarcodeFieldsEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetAttributesCount() {
    int ret = csdocenginePINVOKE.Document_GetAttributesCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasAttribute(string attr_name) {
    bool ret = csdocenginePINVOKE.Document_HasAttribute(swigCPtr, attr_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetAttribute(string attr_name) {
    string ret = csdocenginePINVOKE.Document_GetAttribute(swigCPtr, attr_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetAttribute(string attr_name, string attr_value) {
    csdocenginePINVOKE.Document_SetAttribute(swigCPtr, attr_name, attr_value);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveAttribute(string attr_name) {
    csdocenginePINVOKE.Document_RemoveAttribute(swigCPtr, attr_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual StringsMapIterator AttributesBegin() {
    StringsMapIterator ret = new StringsMapIterator(csdocenginePINVOKE.Document_AttributesBegin(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator AttributesEnd() {
    StringsMapIterator ret = new StringsMapIterator(csdocenginePINVOKE.Document_AttributesEnd(swigCPtr), true);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetType() {
    string ret = csdocenginePINVOKE.Document_GetType(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Serialize(Serializer serializer) {
    csdocenginePINVOKE.Document_Serialize(swigCPtr, Serializer.getCPtr(serializer));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetPhysicalDocIdx() {
    int ret = csdocenginePINVOKE.Document_GetPhysicalDocIdx(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
