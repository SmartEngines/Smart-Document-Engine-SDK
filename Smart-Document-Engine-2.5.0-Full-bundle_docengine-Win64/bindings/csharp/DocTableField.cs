//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.doc {

using se.common;

public class DocTableField : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public DocTableField(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(DocTableField obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(DocTableField obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DocTableField() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csdocenginePINVOKE.delete_DocTableField(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual DocBaseFieldInfo GetBaseFieldInfo() {
    DocBaseFieldInfo ret = new DocBaseFieldInfo(csdocenginePINVOKE.DocTableField_GetBaseFieldInfo(swigCPtr), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocBaseFieldInfo GetMutableBaseFieldInfo() {
    DocBaseFieldInfo ret = new DocBaseFieldInfo(csdocenginePINVOKE.DocTableField_GetMutableBaseFieldInfo(swigCPtr), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetRowsCount() {
    int ret = csdocenginePINVOKE.DocTableField_GetRowsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetColsCount() {
    int ret = csdocenginePINVOKE.DocTableField_GetColsCount(swigCPtr);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocTextField GetCell(int row, int col) {
    DocTextField ret = new DocTextField(csdocenginePINVOKE.DocTableField_GetCell(swigCPtr, row, col), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocTextField GetMutableCell(int row, int col) {
    DocTextField ret = new DocTextField(csdocenginePINVOKE.DocTableField_GetMutableCell(swigCPtr, row, col), false);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetCell(int row, int col, DocTextField text_field) {
    csdocenginePINVOKE.DocTableField_SetCell(swigCPtr, row, col, DocTextField.getCPtr(text_field));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ResizeRows(int rows) {
    csdocenginePINVOKE.DocTableField_ResizeRows__SWIG_0(swigCPtr, rows);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ResizeRows(int rows, DocTextField filler) {
    csdocenginePINVOKE.DocTableField_ResizeRows__SWIG_1(swigCPtr, rows, DocTextField.getCPtr(filler));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ResizeCols(int cols) {
    csdocenginePINVOKE.DocTableField_ResizeCols__SWIG_0(swigCPtr, cols);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ResizeCols(int cols, DocTextField filler) {
    csdocenginePINVOKE.DocTableField_ResizeCols__SWIG_1(swigCPtr, cols, DocTextField.getCPtr(filler));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string GetColName(int col) {
    string ret = csdocenginePINVOKE.DocTableField_GetColName(swigCPtr, col);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetColName(int col, string col_name) {
    csdocenginePINVOKE.DocTableField_SetColName(swigCPtr, col, col_name);
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Serialize(Serializer serializer) {
    csdocenginePINVOKE.DocTableField_Serialize(swigCPtr, Serializer.getCPtr(serializer));
    if (csdocenginePINVOKE.SWIGPendingException.Pending) throw csdocenginePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
